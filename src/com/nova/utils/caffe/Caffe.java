// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

package com.nova.utils.caffe;

public final class Caffe {
  private Caffe() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface BlobProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 num = 1 [default = 0];
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     */
    boolean hasNum();
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     */
    int getNum();

    // optional int32 channels = 2 [default = 0];
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    boolean hasChannels();
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    int getChannels();

    // optional int32 height = 3 [default = 0];
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    boolean hasHeight();
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    int getHeight();

    // optional int32 width = 4 [default = 0];
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    boolean hasWidth();
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    int getWidth();

    // repeated float data = 5 [packed = true];
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    java.util.List<java.lang.Float> getDataList();
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    int getDataCount();
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    float getData(int index);

    // repeated float diff = 6 [packed = true];
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    java.util.List<java.lang.Float> getDiffList();
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    int getDiffCount();
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    float getDiff(int index);
  }
  /**
   * Protobuf type {@code com.nova.utils.caffe.BlobProto}
   */
  public static final class BlobProto extends
      com.google.protobuf.GeneratedMessage
      implements BlobProtoOrBuilder {
    // Use BlobProto.newBuilder() to construct.
    private BlobProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlobProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlobProto defaultInstance;
    public static BlobProto getDefaultInstance() {
      return defaultInstance;
    }

    public BlobProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlobProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              num_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              channels_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              height_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              width_ = input.readInt32();
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                data_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              data_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                data_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                data_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                diff_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              diff_.add(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                diff_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                diff_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          diff_ = java.util.Collections.unmodifiableList(diff_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nova.utils.caffe.Caffe.BlobProto.class, com.nova.utils.caffe.Caffe.BlobProto.Builder.class);
    }

    public static com.google.protobuf.Parser<BlobProto> PARSER =
        new com.google.protobuf.AbstractParser<BlobProto>() {
      public BlobProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlobProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlobProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 num = 1 [default = 0];
    public static final int NUM_FIELD_NUMBER = 1;
    private int num_;
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     */
    public boolean hasNum() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     */
    public int getNum() {
      return num_;
    }

    // optional int32 channels = 2 [default = 0];
    public static final int CHANNELS_FIELD_NUMBER = 2;
    private int channels_;
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    public boolean hasChannels() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    public int getChannels() {
      return channels_;
    }

    // optional int32 height = 3 [default = 0];
    public static final int HEIGHT_FIELD_NUMBER = 3;
    private int height_;
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    public int getHeight() {
      return height_;
    }

    // optional int32 width = 4 [default = 0];
    public static final int WIDTH_FIELD_NUMBER = 4;
    private int width_;
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    public int getWidth() {
      return width_;
    }

    // repeated float data = 5 [packed = true];
    public static final int DATA_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> data_;
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    public java.util.List<java.lang.Float>
        getDataList() {
      return data_;
    }
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    public float getData(int index) {
      return data_.get(index);
    }
    private int dataMemoizedSerializedSize = -1;

    // repeated float diff = 6 [packed = true];
    public static final int DIFF_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Float> diff_;
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    public java.util.List<java.lang.Float>
        getDiffList() {
      return diff_;
    }
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    public int getDiffCount() {
      return diff_.size();
    }
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    public float getDiff(int index) {
      return diff_.get(index);
    }
    private int diffMemoizedSerializedSize = -1;

    private void initFields() {
      num_ = 0;
      channels_ = 0;
      height_ = 0;
      width_ = 0;
      data_ = java.util.Collections.emptyList();
      diff_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, num_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, channels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, height_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, width_);
      }
      if (getDataList().size() > 0) {
        output.writeRawVarint32(42);
        output.writeRawVarint32(dataMemoizedSerializedSize);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeFloatNoTag(data_.get(i));
      }
      if (getDiffList().size() > 0) {
        output.writeRawVarint32(50);
        output.writeRawVarint32(diffMemoizedSerializedSize);
      }
      for (int i = 0; i < diff_.size(); i++) {
        output.writeFloatNoTag(diff_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, num_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, channels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, height_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, width_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDataList().size();
        size += dataSize;
        if (!getDataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dataMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDiffList().size();
        size += dataSize;
        if (!getDiffList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        diffMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.nova.utils.caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.BlobProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.BlobProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.BlobProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.BlobProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.BlobProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.BlobProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.nova.utils.caffe.Caffe.BlobProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.nova.utils.caffe.BlobProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.nova.utils.caffe.Caffe.BlobProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nova.utils.caffe.Caffe.BlobProto.class, com.nova.utils.caffe.Caffe.BlobProto.Builder.class);
      }

      // Construct using com.nova.utils.caffe.Caffe.BlobProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        num_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        channels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        diff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProto_descriptor;
      }

      public com.nova.utils.caffe.Caffe.BlobProto getDefaultInstanceForType() {
        return com.nova.utils.caffe.Caffe.BlobProto.getDefaultInstance();
      }

      public com.nova.utils.caffe.Caffe.BlobProto build() {
        com.nova.utils.caffe.Caffe.BlobProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nova.utils.caffe.Caffe.BlobProto buildPartial() {
        com.nova.utils.caffe.Caffe.BlobProto result = new com.nova.utils.caffe.Caffe.BlobProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.num_ = num_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.channels_ = channels_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.width_ = width_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.data_ = data_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          diff_ = java.util.Collections.unmodifiableList(diff_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.diff_ = diff_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nova.utils.caffe.Caffe.BlobProto) {
          return mergeFrom((com.nova.utils.caffe.Caffe.BlobProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nova.utils.caffe.Caffe.BlobProto other) {
        if (other == com.nova.utils.caffe.Caffe.BlobProto.getDefaultInstance()) return this;
        if (other.hasNum()) {
          setNum(other.getNum());
        }
        if (other.hasChannels()) {
          setChannels(other.getChannels());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
        if (!other.diff_.isEmpty()) {
          if (diff_.isEmpty()) {
            diff_ = other.diff_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDiffIsMutable();
            diff_.addAll(other.diff_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nova.utils.caffe.Caffe.BlobProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nova.utils.caffe.Caffe.BlobProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 num = 1 [default = 0];
      private int num_ ;
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       */
      public boolean hasNum() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       */
      public int getNum() {
        return num_;
      }
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       */
      public Builder setNum(int value) {
        bitField0_ |= 0x00000001;
        num_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       */
      public Builder clearNum() {
        bitField0_ = (bitField0_ & ~0x00000001);
        num_ = 0;
        onChanged();
        return this;
      }

      // optional int32 channels = 2 [default = 0];
      private int channels_ ;
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public boolean hasChannels() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public int getChannels() {
        return channels_;
      }
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public Builder setChannels(int value) {
        bitField0_ |= 0x00000002;
        channels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public Builder clearChannels() {
        bitField0_ = (bitField0_ & ~0x00000002);
        channels_ = 0;
        onChanged();
        return this;
      }

      // optional int32 height = 3 [default = 0];
      private int height_ ;
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000004;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000004);
        height_ = 0;
        onChanged();
        return this;
      }

      // optional int32 width = 4 [default = 0];
      private int width_ ;
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000008;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        width_ = 0;
        onChanged();
        return this;
      }

      // repeated float data = 5 [packed = true];
      private java.util.List<java.lang.Float> data_ = java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          data_ = new java.util.ArrayList<java.lang.Float>(data_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public float getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder setData(
          int index, float value) {
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder addData(float value) {
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDataIsMutable();
        super.addAll(values, data_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated float diff = 6 [packed = true];
      private java.util.List<java.lang.Float> diff_ = java.util.Collections.emptyList();
      private void ensureDiffIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          diff_ = new java.util.ArrayList<java.lang.Float>(diff_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getDiffList() {
        return java.util.Collections.unmodifiableList(diff_);
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public int getDiffCount() {
        return diff_.size();
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public float getDiff(int index) {
        return diff_.get(index);
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder setDiff(
          int index, float value) {
        ensureDiffIsMutable();
        diff_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder addDiff(float value) {
        ensureDiffIsMutable();
        diff_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder addAllDiff(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDiffIsMutable();
        super.addAll(values, diff_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder clearDiff() {
        diff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.nova.utils.caffe.BlobProto)
    }

    static {
      defaultInstance = new BlobProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.nova.utils.caffe.BlobProto)
  }

  public interface BlobProtoVectorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .com.nova.utils.caffe.BlobProto blobs = 1;
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    java.util.List<com.nova.utils.caffe.Caffe.BlobProto> 
        getBlobsList();
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    com.nova.utils.caffe.Caffe.BlobProto getBlobs(int index);
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    int getBlobsCount();
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    java.util.List<? extends com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList();
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    com.nova.utils.caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.nova.utils.caffe.BlobProtoVector}
   *
   * <pre>
   * The BlobProtoVector is simply a way to pass multiple blobproto instances
   * around.
   * </pre>
   */
  public static final class BlobProtoVector extends
      com.google.protobuf.GeneratedMessage
      implements BlobProtoVectorOrBuilder {
    // Use BlobProtoVector.newBuilder() to construct.
    private BlobProtoVector(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlobProtoVector(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlobProtoVector defaultInstance;
    public static BlobProtoVector getDefaultInstance() {
      return defaultInstance;
    }

    public BlobProtoVector getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlobProtoVector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                blobs_ = new java.util.ArrayList<com.nova.utils.caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              blobs_.add(input.readMessage(com.nova.utils.caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          blobs_ = java.util.Collections.unmodifiableList(blobs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProtoVector_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProtoVector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nova.utils.caffe.Caffe.BlobProtoVector.class, com.nova.utils.caffe.Caffe.BlobProtoVector.Builder.class);
    }

    public static com.google.protobuf.Parser<BlobProtoVector> PARSER =
        new com.google.protobuf.AbstractParser<BlobProtoVector>() {
      public BlobProtoVector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlobProtoVector(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlobProtoVector> getParserForType() {
      return PARSER;
    }

    // repeated .com.nova.utils.caffe.BlobProto blobs = 1;
    public static final int BLOBS_FIELD_NUMBER = 1;
    private java.util.List<com.nova.utils.caffe.Caffe.BlobProto> blobs_;
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    public java.util.List<com.nova.utils.caffe.Caffe.BlobProto> getBlobsList() {
      return blobs_;
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    public java.util.List<? extends com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList() {
      return blobs_;
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    public com.nova.utils.caffe.Caffe.BlobProto getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
     */
    public com.nova.utils.caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index) {
      return blobs_.get(index);
    }

    private void initFields() {
      blobs_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < blobs_.size(); i++) {
        output.writeMessage(1, blobs_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < blobs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, blobs_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.nova.utils.caffe.Caffe.BlobProtoVector prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.nova.utils.caffe.BlobProtoVector}
     *
     * <pre>
     * The BlobProtoVector is simply a way to pass multiple blobproto instances
     * around.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.nova.utils.caffe.Caffe.BlobProtoVectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProtoVector_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProtoVector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nova.utils.caffe.Caffe.BlobProtoVector.class, com.nova.utils.caffe.Caffe.BlobProtoVector.Builder.class);
      }

      // Construct using com.nova.utils.caffe.Caffe.BlobProtoVector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getBlobsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_BlobProtoVector_descriptor;
      }

      public com.nova.utils.caffe.Caffe.BlobProtoVector getDefaultInstanceForType() {
        return com.nova.utils.caffe.Caffe.BlobProtoVector.getDefaultInstance();
      }

      public com.nova.utils.caffe.Caffe.BlobProtoVector build() {
        com.nova.utils.caffe.Caffe.BlobProtoVector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nova.utils.caffe.Caffe.BlobProtoVector buildPartial() {
        com.nova.utils.caffe.Caffe.BlobProtoVector result = new com.nova.utils.caffe.Caffe.BlobProtoVector(this);
        int from_bitField0_ = bitField0_;
        if (blobsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            blobs_ = java.util.Collections.unmodifiableList(blobs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.blobs_ = blobs_;
        } else {
          result.blobs_ = blobsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nova.utils.caffe.Caffe.BlobProtoVector) {
          return mergeFrom((com.nova.utils.caffe.Caffe.BlobProtoVector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nova.utils.caffe.Caffe.BlobProtoVector other) {
        if (other == com.nova.utils.caffe.Caffe.BlobProtoVector.getDefaultInstance()) return this;
        if (blobsBuilder_ == null) {
          if (!other.blobs_.isEmpty()) {
            if (blobs_.isEmpty()) {
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBlobsIsMutable();
              blobs_.addAll(other.blobs_);
            }
            onChanged();
          }
        } else {
          if (!other.blobs_.isEmpty()) {
            if (blobsBuilder_.isEmpty()) {
              blobsBuilder_.dispose();
              blobsBuilder_ = null;
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              blobsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBlobsFieldBuilder() : null;
            } else {
              blobsBuilder_.addAllMessages(other.blobs_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nova.utils.caffe.Caffe.BlobProtoVector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nova.utils.caffe.Caffe.BlobProtoVector) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .com.nova.utils.caffe.BlobProto blobs = 1;
      private java.util.List<com.nova.utils.caffe.Caffe.BlobProto> blobs_ =
        java.util.Collections.emptyList();
      private void ensureBlobsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          blobs_ = new java.util.ArrayList<com.nova.utils.caffe.Caffe.BlobProto>(blobs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.nova.utils.caffe.Caffe.BlobProto, com.nova.utils.caffe.Caffe.BlobProto.Builder, com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> blobsBuilder_;

      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public java.util.List<com.nova.utils.caffe.Caffe.BlobProto> getBlobsList() {
        if (blobsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(blobs_);
        } else {
          return blobsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public int getBlobsCount() {
        if (blobsBuilder_ == null) {
          return blobs_.size();
        } else {
          return blobsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public com.nova.utils.caffe.Caffe.BlobProto getBlobs(int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);
        } else {
          return blobsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public Builder setBlobs(
          int index, com.nova.utils.caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.set(index, value);
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public Builder setBlobs(
          int index, com.nova.utils.caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.set(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(com.nova.utils.caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(
          int index, com.nova.utils.caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(index, value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(
          com.nova.utils.caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(
          int index, com.nova.utils.caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public Builder addAllBlobs(
          java.lang.Iterable<? extends com.nova.utils.caffe.Caffe.BlobProto> values) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          super.addAll(values, blobs_);
          onChanged();
        } else {
          blobsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public Builder clearBlobs() {
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public Builder removeBlobs(int index) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.remove(index);
          onChanged();
        } else {
          blobsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public com.nova.utils.caffe.Caffe.BlobProto.Builder getBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public com.nova.utils.caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
          int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);  } else {
          return blobsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public java.util.List<? extends com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
           getBlobsOrBuilderList() {
        if (blobsBuilder_ != null) {
          return blobsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(blobs_);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public com.nova.utils.caffe.Caffe.BlobProto.Builder addBlobsBuilder() {
        return getBlobsFieldBuilder().addBuilder(
            com.nova.utils.caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public com.nova.utils.caffe.Caffe.BlobProto.Builder addBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().addBuilder(
            index, com.nova.utils.caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 1;</code>
       */
      public java.util.List<com.nova.utils.caffe.Caffe.BlobProto.Builder> 
           getBlobsBuilderList() {
        return getBlobsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.nova.utils.caffe.Caffe.BlobProto, com.nova.utils.caffe.Caffe.BlobProto.Builder, com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
          getBlobsFieldBuilder() {
        if (blobsBuilder_ == null) {
          blobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.nova.utils.caffe.Caffe.BlobProto, com.nova.utils.caffe.Caffe.BlobProto.Builder, com.nova.utils.caffe.Caffe.BlobProtoOrBuilder>(
                  blobs_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          blobs_ = null;
        }
        return blobsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.nova.utils.caffe.BlobProtoVector)
    }

    static {
      defaultInstance = new BlobProtoVector(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.nova.utils.caffe.BlobProtoVector)
  }

  public interface DatumOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 channels = 1;
    /**
     * <code>optional int32 channels = 1;</code>
     */
    boolean hasChannels();
    /**
     * <code>optional int32 channels = 1;</code>
     */
    int getChannels();

    // optional int32 height = 2;
    /**
     * <code>optional int32 height = 2;</code>
     */
    boolean hasHeight();
    /**
     * <code>optional int32 height = 2;</code>
     */
    int getHeight();

    // optional int32 width = 3;
    /**
     * <code>optional int32 width = 3;</code>
     */
    boolean hasWidth();
    /**
     * <code>optional int32 width = 3;</code>
     */
    int getWidth();

    // optional bytes data = 4;
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    boolean hasData();
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    com.google.protobuf.ByteString getData();

    // optional int32 label = 5;
    /**
     * <code>optional int32 label = 5;</code>
     */
    boolean hasLabel();
    /**
     * <code>optional int32 label = 5;</code>
     */
    int getLabel();

    // repeated float float_data = 6;
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    java.util.List<java.lang.Float> getFloatDataList();
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    int getFloatDataCount();
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    float getFloatData(int index);
  }
  /**
   * Protobuf type {@code com.nova.utils.caffe.Datum}
   */
  public static final class Datum extends
      com.google.protobuf.GeneratedMessage
      implements DatumOrBuilder {
    // Use Datum.newBuilder() to construct.
    private Datum(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Datum(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Datum defaultInstance;
    public static Datum getDefaultInstance() {
      return defaultInstance;
    }

    public Datum getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Datum(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              channels_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              height_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              width_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              data_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              label_ = input.readInt32();
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                floatData_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              floatData_.add(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                floatData_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                floatData_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          floatData_ = java.util.Collections.unmodifiableList(floatData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_Datum_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_Datum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nova.utils.caffe.Caffe.Datum.class, com.nova.utils.caffe.Caffe.Datum.Builder.class);
    }

    public static com.google.protobuf.Parser<Datum> PARSER =
        new com.google.protobuf.AbstractParser<Datum>() {
      public Datum parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Datum(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Datum> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 channels = 1;
    public static final int CHANNELS_FIELD_NUMBER = 1;
    private int channels_;
    /**
     * <code>optional int32 channels = 1;</code>
     */
    public boolean hasChannels() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 channels = 1;</code>
     */
    public int getChannels() {
      return channels_;
    }

    // optional int32 height = 2;
    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <code>optional int32 height = 2;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 height = 2;</code>
     */
    public int getHeight() {
      return height_;
    }

    // optional int32 width = 3;
    public static final int WIDTH_FIELD_NUMBER = 3;
    private int width_;
    /**
     * <code>optional int32 width = 3;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 width = 3;</code>
     */
    public int getWidth() {
      return width_;
    }

    // optional bytes data = 4;
    public static final int DATA_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString data_;
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    // optional int32 label = 5;
    public static final int LABEL_FIELD_NUMBER = 5;
    private int label_;
    /**
     * <code>optional int32 label = 5;</code>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 label = 5;</code>
     */
    public int getLabel() {
      return label_;
    }

    // repeated float float_data = 6;
    public static final int FLOAT_DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Float> floatData_;
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getFloatDataList() {
      return floatData_;
    }
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    public int getFloatDataCount() {
      return floatData_.size();
    }
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    public float getFloatData(int index) {
      return floatData_.get(index);
    }

    private void initFields() {
      channels_ = 0;
      height_ = 0;
      width_ = 0;
      data_ = com.google.protobuf.ByteString.EMPTY;
      label_ = 0;
      floatData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, channels_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, data_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, label_);
      }
      for (int i = 0; i < floatData_.size(); i++) {
        output.writeFloat(6, floatData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, channels_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, data_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, label_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFloatDataList().size();
        size += dataSize;
        size += 1 * getFloatDataList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.nova.utils.caffe.Caffe.Datum parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.Datum parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.Datum parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.Datum parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.Datum parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.Datum parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.Datum parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.Datum parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.Datum parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.Datum parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.nova.utils.caffe.Caffe.Datum prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.nova.utils.caffe.Datum}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.nova.utils.caffe.Caffe.DatumOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_Datum_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_Datum_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nova.utils.caffe.Caffe.Datum.class, com.nova.utils.caffe.Caffe.Datum.Builder.class);
      }

      // Construct using com.nova.utils.caffe.Caffe.Datum.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        channels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        data_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        label_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        floatData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_Datum_descriptor;
      }

      public com.nova.utils.caffe.Caffe.Datum getDefaultInstanceForType() {
        return com.nova.utils.caffe.Caffe.Datum.getDefaultInstance();
      }

      public com.nova.utils.caffe.Caffe.Datum build() {
        com.nova.utils.caffe.Caffe.Datum result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nova.utils.caffe.Caffe.Datum buildPartial() {
        com.nova.utils.caffe.Caffe.Datum result = new com.nova.utils.caffe.Caffe.Datum(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.channels_ = channels_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.label_ = label_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          floatData_ = java.util.Collections.unmodifiableList(floatData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.floatData_ = floatData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nova.utils.caffe.Caffe.Datum) {
          return mergeFrom((com.nova.utils.caffe.Caffe.Datum)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nova.utils.caffe.Caffe.Datum other) {
        if (other == com.nova.utils.caffe.Caffe.Datum.getDefaultInstance()) return this;
        if (other.hasChannels()) {
          setChannels(other.getChannels());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasLabel()) {
          setLabel(other.getLabel());
        }
        if (!other.floatData_.isEmpty()) {
          if (floatData_.isEmpty()) {
            floatData_ = other.floatData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureFloatDataIsMutable();
            floatData_.addAll(other.floatData_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nova.utils.caffe.Caffe.Datum parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nova.utils.caffe.Caffe.Datum) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 channels = 1;
      private int channels_ ;
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public boolean hasChannels() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public int getChannels() {
        return channels_;
      }
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public Builder setChannels(int value) {
        bitField0_ |= 0x00000001;
        channels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public Builder clearChannels() {
        bitField0_ = (bitField0_ & ~0x00000001);
        channels_ = 0;
        onChanged();
        return this;
      }

      // optional int32 height = 2;
      private int height_ ;
      /**
       * <code>optional int32 height = 2;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000002;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        onChanged();
        return this;
      }

      // optional int32 width = 3;
      private int width_ ;
      /**
       * <code>optional int32 width = 3;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 width = 3;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional int32 width = 3;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000004;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 width = 3;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        onChanged();
        return this;
      }

      // optional bytes data = 4;
      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000008);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      // optional int32 label = 5;
      private int label_ ;
      /**
       * <code>optional int32 label = 5;</code>
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 label = 5;</code>
       */
      public int getLabel() {
        return label_;
      }
      /**
       * <code>optional int32 label = 5;</code>
       */
      public Builder setLabel(int value) {
        bitField0_ |= 0x00000010;
        label_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 label = 5;</code>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000010);
        label_ = 0;
        onChanged();
        return this;
      }

      // repeated float float_data = 6;
      private java.util.List<java.lang.Float> floatData_ = java.util.Collections.emptyList();
      private void ensureFloatDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          floatData_ = new java.util.ArrayList<java.lang.Float>(floatData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getFloatDataList() {
        return java.util.Collections.unmodifiableList(floatData_);
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public int getFloatDataCount() {
        return floatData_.size();
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public float getFloatData(int index) {
        return floatData_.get(index);
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder setFloatData(
          int index, float value) {
        ensureFloatDataIsMutable();
        floatData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder addFloatData(float value) {
        ensureFloatDataIsMutable();
        floatData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder addAllFloatData(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFloatDataIsMutable();
        super.addAll(values, floatData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder clearFloatData() {
        floatData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.nova.utils.caffe.Datum)
    }

    static {
      defaultInstance = new Datum(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.nova.utils.caffe.Datum)
  }

  public interface FillerParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string type = 1 [default = "constant"];
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    // optional float value = 2 [default = 0];
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    float getValue();

    // optional float min = 3 [default = 0];
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    boolean hasMin();
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    float getMin();

    // optional float max = 4 [default = 1];
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    boolean hasMax();
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    float getMax();

    // optional float mean = 5 [default = 0];
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in gaussian filler
     * </pre>
     */
    boolean hasMean();
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in gaussian filler
     * </pre>
     */
    float getMean();

    // optional float std = 6 [default = 1];
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in gaussian filler
     * </pre>
     */
    boolean hasStd();
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in gaussian filler
     * </pre>
     */
    float getStd();
  }
  /**
   * Protobuf type {@code com.nova.utils.caffe.FillerParameter}
   */
  public static final class FillerParameter extends
      com.google.protobuf.GeneratedMessage
      implements FillerParameterOrBuilder {
    // Use FillerParameter.newBuilder() to construct.
    private FillerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FillerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FillerParameter defaultInstance;
    public static FillerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public FillerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FillerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              type_ = input.readBytes();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              value_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              min_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              max_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              mean_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              std_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_FillerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_FillerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nova.utils.caffe.Caffe.FillerParameter.class, com.nova.utils.caffe.Caffe.FillerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<FillerParameter> PARSER =
        new com.google.protobuf.AbstractParser<FillerParameter>() {
      public FillerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FillerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FillerParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string type = 1 [default = "constant"];
    public static final int TYPE_FIELD_NUMBER = 1;
    private java.lang.Object type_;
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float value = 2 [default = 0];
    public static final int VALUE_FIELD_NUMBER = 2;
    private float value_;
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    public float getValue() {
      return value_;
    }

    // optional float min = 3 [default = 0];
    public static final int MIN_FIELD_NUMBER = 3;
    private float min_;
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    public boolean hasMin() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    public float getMin() {
      return min_;
    }

    // optional float max = 4 [default = 1];
    public static final int MAX_FIELD_NUMBER = 4;
    private float max_;
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    public boolean hasMax() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    public float getMax() {
      return max_;
    }

    // optional float mean = 5 [default = 0];
    public static final int MEAN_FIELD_NUMBER = 5;
    private float mean_;
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in gaussian filler
     * </pre>
     */
    public boolean hasMean() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in gaussian filler
     * </pre>
     */
    public float getMean() {
      return mean_;
    }

    // optional float std = 6 [default = 1];
    public static final int STD_FIELD_NUMBER = 6;
    private float std_;
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in gaussian filler
     * </pre>
     */
    public boolean hasStd() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in gaussian filler
     * </pre>
     */
    public float getStd() {
      return std_;
    }

    private void initFields() {
      type_ = "constant";
      value_ = 0F;
      min_ = 0F;
      max_ = 1F;
      mean_ = 0F;
      std_ = 1F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, min_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, max_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, mean_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, std_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, min_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, max_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, mean_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, std_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.nova.utils.caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.FillerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.FillerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.FillerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.FillerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.FillerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.FillerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.nova.utils.caffe.Caffe.FillerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.nova.utils.caffe.FillerParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.nova.utils.caffe.Caffe.FillerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_FillerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_FillerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nova.utils.caffe.Caffe.FillerParameter.class, com.nova.utils.caffe.Caffe.FillerParameter.Builder.class);
      }

      // Construct using com.nova.utils.caffe.Caffe.FillerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = "constant";
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        min_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        max_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000008);
        mean_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        std_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_FillerParameter_descriptor;
      }

      public com.nova.utils.caffe.Caffe.FillerParameter getDefaultInstanceForType() {
        return com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance();
      }

      public com.nova.utils.caffe.Caffe.FillerParameter build() {
        com.nova.utils.caffe.Caffe.FillerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nova.utils.caffe.Caffe.FillerParameter buildPartial() {
        com.nova.utils.caffe.Caffe.FillerParameter result = new com.nova.utils.caffe.Caffe.FillerParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.min_ = min_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.max_ = max_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mean_ = mean_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.std_ = std_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nova.utils.caffe.Caffe.FillerParameter) {
          return mergeFrom((com.nova.utils.caffe.Caffe.FillerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nova.utils.caffe.Caffe.FillerParameter other) {
        if (other == com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance()) return this;
        if (other.hasType()) {
          bitField0_ |= 0x00000001;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasMin()) {
          setMin(other.getMin());
        }
        if (other.hasMax()) {
          setMax(other.getMax());
        }
        if (other.hasMean()) {
          setMean(other.getMean());
        }
        if (other.hasStd()) {
          setStd(other.getStd());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nova.utils.caffe.Caffe.FillerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nova.utils.caffe.Caffe.FillerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string type = 1 [default = "constant"];
      private java.lang.Object type_ = "constant";
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }

      // optional float value = 2 [default = 0];
      private float value_ ;
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public float getValue() {
        return value_;
      }
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public Builder setValue(float value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0F;
        onChanged();
        return this;
      }

      // optional float min = 3 [default = 0];
      private float min_ ;
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public boolean hasMin() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public float getMin() {
        return min_;
      }
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public Builder setMin(float value) {
        bitField0_ |= 0x00000004;
        min_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public Builder clearMin() {
        bitField0_ = (bitField0_ & ~0x00000004);
        min_ = 0F;
        onChanged();
        return this;
      }

      // optional float max = 4 [default = 1];
      private float max_ = 1F;
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public boolean hasMax() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public float getMax() {
        return max_;
      }
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public Builder setMax(float value) {
        bitField0_ |= 0x00000008;
        max_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public Builder clearMax() {
        bitField0_ = (bitField0_ & ~0x00000008);
        max_ = 1F;
        onChanged();
        return this;
      }

      // optional float mean = 5 [default = 0];
      private float mean_ ;
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in gaussian filler
       * </pre>
       */
      public boolean hasMean() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in gaussian filler
       * </pre>
       */
      public float getMean() {
        return mean_;
      }
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in gaussian filler
       * </pre>
       */
      public Builder setMean(float value) {
        bitField0_ |= 0x00000010;
        mean_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in gaussian filler
       * </pre>
       */
      public Builder clearMean() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mean_ = 0F;
        onChanged();
        return this;
      }

      // optional float std = 6 [default = 1];
      private float std_ = 1F;
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in gaussian filler
       * </pre>
       */
      public boolean hasStd() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in gaussian filler
       * </pre>
       */
      public float getStd() {
        return std_;
      }
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in gaussian filler
       * </pre>
       */
      public Builder setStd(float value) {
        bitField0_ |= 0x00000020;
        std_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in gaussian filler
       * </pre>
       */
      public Builder clearStd() {
        bitField0_ = (bitField0_ & ~0x00000020);
        std_ = 1F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.nova.utils.caffe.FillerParameter)
    }

    static {
      defaultInstance = new FillerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.nova.utils.caffe.FillerParameter)
  }

  public interface LayerParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string name = 1;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // optional string type = 2;
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    // optional uint32 num_output = 3;
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    boolean hasNumOutput();
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    int getNumOutput();

    // optional bool biasterm = 4 [default = true];
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean hasBiasterm();
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean getBiasterm();

    // optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    boolean hasWeightFiller();
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    com.nova.utils.caffe.Caffe.FillerParameter getWeightFiller();
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    com.nova.utils.caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder();

    // optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    com.nova.utils.caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    com.nova.utils.caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();

    // optional uint32 pad = 7 [default = 0];
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    boolean hasPad();
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    int getPad();

    // optional uint32 kernelsize = 8;
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    boolean hasKernelsize();
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    int getKernelsize();

    // optional uint32 group = 9 [default = 1];
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    boolean hasGroup();
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    int getGroup();

    // optional uint32 stride = 10 [default = 1];
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    boolean hasStride();
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    int getStride();

    // optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    boolean hasPool();
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod getPool();

    // optional float dropout_ratio = 12 [default = 0.5];
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    boolean hasDropoutRatio();
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    float getDropoutRatio();

    // optional uint32 local_size = 13 [default = 5];
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    boolean hasLocalSize();
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    int getLocalSize();

    // optional float alpha = 14 [default = 1];
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    boolean hasAlpha();
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    float getAlpha();

    // optional float beta = 15 [default = 0.75];
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    boolean hasBeta();
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    float getBeta();

    // optional string source = 16;
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    // optional float scale = 17 [default = 1];
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    float getScale();

    // optional string meanfile = 18;
    /**
     * <code>optional string meanfile = 18;</code>
     */
    boolean hasMeanfile();
    /**
     * <code>optional string meanfile = 18;</code>
     */
    java.lang.String getMeanfile();
    /**
     * <code>optional string meanfile = 18;</code>
     */
    com.google.protobuf.ByteString
        getMeanfileBytes();

    // optional uint32 batchsize = 19;
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    boolean hasBatchsize();
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    int getBatchsize();

    // optional uint32 cropsize = 20 [default = 0];
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    boolean hasCropsize();
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    int getCropsize();

    // optional bool mirror = 21 [default = false];
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    boolean getMirror();

    // repeated .com.nova.utils.caffe.BlobProto blobs = 50;
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    java.util.List<com.nova.utils.caffe.Caffe.BlobProto> 
        getBlobsList();
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    com.nova.utils.caffe.Caffe.BlobProto getBlobs(int index);
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    int getBlobsCount();
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    java.util.List<? extends com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList();
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    com.nova.utils.caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index);

    // repeated float blobs_lr = 51;
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to set
     * the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    java.util.List<java.lang.Float> getBlobsLrList();
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to set
     * the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    int getBlobsLrCount();
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to set
     * the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    float getBlobsLr(int index);

    // repeated float weight_decay = 52;
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    java.util.List<java.lang.Float> getWeightDecayList();
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    int getWeightDecayCount();
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    float getWeightDecay(int index);

    // optional uint32 rand_skip = 53 [default = 0];
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    boolean hasRandSkip();
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    int getRandSkip();
  }
  /**
   * Protobuf type {@code com.nova.utils.caffe.LayerParameter}
   */
  public static final class LayerParameter extends
      com.google.protobuf.GeneratedMessage
      implements LayerParameterOrBuilder {
    // Use LayerParameter.newBuilder() to construct.
    private LayerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LayerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LayerParameter defaultInstance;
    public static LayerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public LayerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LayerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              type_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              numOutput_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              biasterm_ = input.readBool();
              break;
            }
            case 42: {
              com.nova.utils.caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = weightFiller_.toBuilder();
              }
              weightFiller_ = input.readMessage(com.nova.utils.caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(weightFiller_);
                weightFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.nova.utils.caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(com.nova.utils.caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              pad_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              kernelsize_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              group_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              stride_ = input.readUInt32();
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod value = com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                pool_ = value;
              }
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              dropoutRatio_ = input.readFloat();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              localSize_ = input.readUInt32();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              alpha_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              beta_ = input.readFloat();
              break;
            }
            case 130: {
              bitField0_ |= 0x00008000;
              source_ = input.readBytes();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              scale_ = input.readFloat();
              break;
            }
            case 146: {
              bitField0_ |= 0x00020000;
              meanfile_ = input.readBytes();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              batchsize_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              cropsize_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              mirror_ = input.readBool();
              break;
            }
            case 402: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                blobs_ = new java.util.ArrayList<com.nova.utils.caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00200000;
              }
              blobs_.add(input.readMessage(com.nova.utils.caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
            case 413: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00400000;
              }
              blobsLr_.add(input.readFloat());
              break;
            }
            case 410: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                blobsLr_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 421: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00800000;
              }
              weightDecay_.add(input.readFloat());
              break;
            }
            case 418: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                weightDecay_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 424: {
              bitField0_ |= 0x00200000;
              randSkip_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          blobs_ = java.util.Collections.unmodifiableList(blobs_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nova.utils.caffe.Caffe.LayerParameter.class, com.nova.utils.caffe.Caffe.LayerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<LayerParameter> PARSER =
        new com.google.protobuf.AbstractParser<LayerParameter>() {
      public LayerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LayerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LayerParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code com.nova.utils.caffe.LayerParameter.PoolMethod}
     */
    public enum PoolMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MAX = 0;</code>
       */
      MAX(0, 0),
      /**
       * <code>AVE = 1;</code>
       */
      AVE(1, 1),
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      STOCHASTIC(2, 2),
      ;

      /**
       * <code>MAX = 0;</code>
       */
      public static final int MAX_VALUE = 0;
      /**
       * <code>AVE = 1;</code>
       */
      public static final int AVE_VALUE = 1;
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      public static final int STOCHASTIC_VALUE = 2;


      public final int getNumber() { return value; }

      public static PoolMethod valueOf(int value) {
        switch (value) {
          case 0: return MAX;
          case 1: return AVE;
          case 2: return STOCHASTIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PoolMethod>() {
              public PoolMethod findValueByNumber(int number) {
                return PoolMethod.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.LayerParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final PoolMethod[] VALUES = values();

      public static PoolMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PoolMethod(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.nova.utils.caffe.LayerParameter.PoolMethod)
    }

    private int bitField0_;
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private java.lang.Object type_;
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 num_output = 3;
    public static final int NUM_OUTPUT_FIELD_NUMBER = 3;
    private int numOutput_;
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    public boolean hasNumOutput() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    public int getNumOutput() {
      return numOutput_;
    }

    // optional bool biasterm = 4 [default = true];
    public static final int BIASTERM_FIELD_NUMBER = 4;
    private boolean biasterm_;
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean hasBiasterm() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean getBiasterm() {
      return biasterm_;
    }

    // optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;
    public static final int WEIGHT_FILLER_FIELD_NUMBER = 5;
    private com.nova.utils.caffe.Caffe.FillerParameter weightFiller_;
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public boolean hasWeightFiller() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.FillerParameter getWeightFiller() {
      return weightFiller_;
    }
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
      return weightFiller_;
    }

    // optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;
    public static final int BIAS_FILLER_FIELD_NUMBER = 6;
    private com.nova.utils.caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    // optional uint32 pad = 7 [default = 0];
    public static final int PAD_FIELD_NUMBER = 7;
    private int pad_;
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    public boolean hasPad() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    public int getPad() {
      return pad_;
    }

    // optional uint32 kernelsize = 8;
    public static final int KERNELSIZE_FIELD_NUMBER = 8;
    private int kernelsize_;
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public boolean hasKernelsize() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public int getKernelsize() {
      return kernelsize_;
    }

    // optional uint32 group = 9 [default = 1];
    public static final int GROUP_FIELD_NUMBER = 9;
    private int group_;
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public boolean hasGroup() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public int getGroup() {
      return group_;
    }

    // optional uint32 stride = 10 [default = 1];
    public static final int STRIDE_FIELD_NUMBER = 10;
    private int stride_;
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public boolean hasStride() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public int getStride() {
      return stride_;
    }

    // optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];
    public static final int POOL_FIELD_NUMBER = 11;
    private com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod pool_;
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public boolean hasPool() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod getPool() {
      return pool_;
    }

    // optional float dropout_ratio = 12 [default = 0.5];
    public static final int DROPOUT_RATIO_FIELD_NUMBER = 12;
    private float dropoutRatio_;
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public boolean hasDropoutRatio() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public float getDropoutRatio() {
      return dropoutRatio_;
    }

    // optional uint32 local_size = 13 [default = 5];
    public static final int LOCAL_SIZE_FIELD_NUMBER = 13;
    private int localSize_;
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public boolean hasLocalSize() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public int getLocalSize() {
      return localSize_;
    }

    // optional float alpha = 14 [default = 1];
    public static final int ALPHA_FIELD_NUMBER = 14;
    private float alpha_;
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public boolean hasAlpha() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public float getAlpha() {
      return alpha_;
    }

    // optional float beta = 15 [default = 0.75];
    public static final int BETA_FIELD_NUMBER = 15;
    private float beta_;
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public boolean hasBeta() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public float getBeta() {
      return beta_;
    }

    // optional string source = 16;
    public static final int SOURCE_FIELD_NUMBER = 16;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float scale = 17 [default = 1];
    public static final int SCALE_FIELD_NUMBER = 17;
    private float scale_;
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    // optional string meanfile = 18;
    public static final int MEANFILE_FIELD_NUMBER = 18;
    private java.lang.Object meanfile_;
    /**
     * <code>optional string meanfile = 18;</code>
     */
    public boolean hasMeanfile() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional string meanfile = 18;</code>
     */
    public java.lang.String getMeanfile() {
      java.lang.Object ref = meanfile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanfile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string meanfile = 18;</code>
     */
    public com.google.protobuf.ByteString
        getMeanfileBytes() {
      java.lang.Object ref = meanfile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanfile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 batchsize = 19;
    public static final int BATCHSIZE_FIELD_NUMBER = 19;
    private int batchsize_;
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    public boolean hasBatchsize() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    public int getBatchsize() {
      return batchsize_;
    }

    // optional uint32 cropsize = 20 [default = 0];
    public static final int CROPSIZE_FIELD_NUMBER = 20;
    private int cropsize_;
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    public boolean hasCropsize() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    public int getCropsize() {
      return cropsize_;
    }

    // optional bool mirror = 21 [default = false];
    public static final int MIRROR_FIELD_NUMBER = 21;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    // repeated .com.nova.utils.caffe.BlobProto blobs = 50;
    public static final int BLOBS_FIELD_NUMBER = 50;
    private java.util.List<com.nova.utils.caffe.Caffe.BlobProto> blobs_;
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public java.util.List<com.nova.utils.caffe.Caffe.BlobProto> getBlobsList() {
      return blobs_;
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public java.util.List<? extends com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList() {
      return blobs_;
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.BlobProto getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index) {
      return blobs_.get(index);
    }

    // repeated float blobs_lr = 51;
    public static final int BLOBS_LR_FIELD_NUMBER = 51;
    private java.util.List<java.lang.Float> blobsLr_;
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to set
     * the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getBlobsLrList() {
      return blobsLr_;
    }
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to set
     * the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public int getBlobsLrCount() {
      return blobsLr_.size();
    }
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to set
     * the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public float getBlobsLr(int index) {
      return blobsLr_.get(index);
    }

    // repeated float weight_decay = 52;
    public static final int WEIGHT_DECAY_FIELD_NUMBER = 52;
    private java.util.List<java.lang.Float> weightDecay_;
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getWeightDecayList() {
      return weightDecay_;
    }
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public int getWeightDecayCount() {
      return weightDecay_.size();
    }
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public float getWeightDecay(int index) {
      return weightDecay_.get(index);
    }

    // optional uint32 rand_skip = 53 [default = 0];
    public static final int RAND_SKIP_FIELD_NUMBER = 53;
    private int randSkip_;
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    public boolean hasRandSkip() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    public int getRandSkip() {
      return randSkip_;
    }

    private void initFields() {
      name_ = "";
      type_ = "";
      numOutput_ = 0;
      biasterm_ = true;
      weightFiller_ = com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance();
      biasFiller_ = com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance();
      pad_ = 0;
      kernelsize_ = 0;
      group_ = 1;
      stride_ = 1;
      pool_ = com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod.MAX;
      dropoutRatio_ = 0.5F;
      localSize_ = 5;
      alpha_ = 1F;
      beta_ = 0.75F;
      source_ = "";
      scale_ = 1F;
      meanfile_ = "";
      batchsize_ = 0;
      cropsize_ = 0;
      mirror_ = false;
      blobs_ = java.util.Collections.emptyList();
      blobsLr_ = java.util.Collections.emptyList();
      weightDecay_ = java.util.Collections.emptyList();
      randSkip_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, numOutput_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, biasterm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, weightFiller_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, biasFiller_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, pad_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, kernelsize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, group_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, stride_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(11, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, dropoutRatio_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, localSize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, alpha_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, beta_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBytes(16, getSourceBytes());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, scale_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeBytes(18, getMeanfileBytes());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(19, batchsize_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(20, cropsize_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeBool(21, mirror_);
      }
      for (int i = 0; i < blobs_.size(); i++) {
        output.writeMessage(50, blobs_.get(i));
      }
      for (int i = 0; i < blobsLr_.size(); i++) {
        output.writeFloat(51, blobsLr_.get(i));
      }
      for (int i = 0; i < weightDecay_.size(); i++) {
        output.writeFloat(52, weightDecay_.get(i));
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(53, randSkip_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, numOutput_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, biasterm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, weightFiller_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, biasFiller_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, pad_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, kernelsize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, group_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, stride_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, dropoutRatio_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, localSize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, alpha_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, beta_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, getSourceBytes());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, scale_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(18, getMeanfileBytes());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, batchsize_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, cropsize_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, mirror_);
      }
      for (int i = 0; i < blobs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(50, blobs_.get(i));
      }
      {
        int dataSize = 0;
        dataSize = 4 * getBlobsLrList().size();
        size += dataSize;
        size += 2 * getBlobsLrList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getWeightDecayList().size();
        size += dataSize;
        size += 2 * getWeightDecayList().size();
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(53, randSkip_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.nova.utils.caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.LayerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.LayerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.LayerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.LayerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.LayerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.LayerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.nova.utils.caffe.Caffe.LayerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.nova.utils.caffe.LayerParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.nova.utils.caffe.Caffe.LayerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nova.utils.caffe.Caffe.LayerParameter.class, com.nova.utils.caffe.Caffe.LayerParameter.Builder.class);
      }

      // Construct using com.nova.utils.caffe.Caffe.LayerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWeightFillerFieldBuilder();
          getBiasFillerFieldBuilder();
          getBlobsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        numOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        biasterm_ = true;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (weightFillerBuilder_ == null) {
          weightFiller_ = com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        pad_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        kernelsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        group_ = 1;
        bitField0_ = (bitField0_ & ~0x00000100);
        stride_ = 1;
        bitField0_ = (bitField0_ & ~0x00000200);
        pool_ = com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod.MAX;
        bitField0_ = (bitField0_ & ~0x00000400);
        dropoutRatio_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000800);
        localSize_ = 5;
        bitField0_ = (bitField0_ & ~0x00001000);
        alpha_ = 1F;
        bitField0_ = (bitField0_ & ~0x00002000);
        beta_ = 0.75F;
        bitField0_ = (bitField0_ & ~0x00004000);
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00008000);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00010000);
        meanfile_ = "";
        bitField0_ = (bitField0_ & ~0x00020000);
        batchsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        cropsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00100000);
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
        } else {
          blobsBuilder_.clear();
        }
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        randSkip_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerParameter_descriptor;
      }

      public com.nova.utils.caffe.Caffe.LayerParameter getDefaultInstanceForType() {
        return com.nova.utils.caffe.Caffe.LayerParameter.getDefaultInstance();
      }

      public com.nova.utils.caffe.Caffe.LayerParameter build() {
        com.nova.utils.caffe.Caffe.LayerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nova.utils.caffe.Caffe.LayerParameter buildPartial() {
        com.nova.utils.caffe.Caffe.LayerParameter result = new com.nova.utils.caffe.Caffe.LayerParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.numOutput_ = numOutput_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.biasterm_ = biasterm_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (weightFillerBuilder_ == null) {
          result.weightFiller_ = weightFiller_;
        } else {
          result.weightFiller_ = weightFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.pad_ = pad_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.kernelsize_ = kernelsize_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.group_ = group_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.stride_ = stride_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.pool_ = pool_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.dropoutRatio_ = dropoutRatio_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.localSize_ = localSize_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.alpha_ = alpha_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.beta_ = beta_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.meanfile_ = meanfile_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.batchsize_ = batchsize_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.cropsize_ = cropsize_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.mirror_ = mirror_;
        if (blobsBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000)) {
            blobs_ = java.util.Collections.unmodifiableList(blobs_);
            bitField0_ = (bitField0_ & ~0x00200000);
          }
          result.blobs_ = blobs_;
        } else {
          result.blobs_ = blobsBuilder_.build();
        }
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.blobsLr_ = blobsLr_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.weightDecay_ = weightDecay_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.randSkip_ = randSkip_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nova.utils.caffe.Caffe.LayerParameter) {
          return mergeFrom((com.nova.utils.caffe.Caffe.LayerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nova.utils.caffe.Caffe.LayerParameter other) {
        if (other == com.nova.utils.caffe.Caffe.LayerParameter.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasType()) {
          bitField0_ |= 0x00000002;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasNumOutput()) {
          setNumOutput(other.getNumOutput());
        }
        if (other.hasBiasterm()) {
          setBiasterm(other.getBiasterm());
        }
        if (other.hasWeightFiller()) {
          mergeWeightFiller(other.getWeightFiller());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        if (other.hasPad()) {
          setPad(other.getPad());
        }
        if (other.hasKernelsize()) {
          setKernelsize(other.getKernelsize());
        }
        if (other.hasGroup()) {
          setGroup(other.getGroup());
        }
        if (other.hasStride()) {
          setStride(other.getStride());
        }
        if (other.hasPool()) {
          setPool(other.getPool());
        }
        if (other.hasDropoutRatio()) {
          setDropoutRatio(other.getDropoutRatio());
        }
        if (other.hasLocalSize()) {
          setLocalSize(other.getLocalSize());
        }
        if (other.hasAlpha()) {
          setAlpha(other.getAlpha());
        }
        if (other.hasBeta()) {
          setBeta(other.getBeta());
        }
        if (other.hasSource()) {
          bitField0_ |= 0x00008000;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMeanfile()) {
          bitField0_ |= 0x00020000;
          meanfile_ = other.meanfile_;
          onChanged();
        }
        if (other.hasBatchsize()) {
          setBatchsize(other.getBatchsize());
        }
        if (other.hasCropsize()) {
          setCropsize(other.getCropsize());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (blobsBuilder_ == null) {
          if (!other.blobs_.isEmpty()) {
            if (blobs_.isEmpty()) {
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00200000);
            } else {
              ensureBlobsIsMutable();
              blobs_.addAll(other.blobs_);
            }
            onChanged();
          }
        } else {
          if (!other.blobs_.isEmpty()) {
            if (blobsBuilder_.isEmpty()) {
              blobsBuilder_.dispose();
              blobsBuilder_ = null;
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00200000);
              blobsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBlobsFieldBuilder() : null;
            } else {
              blobsBuilder_.addAllMessages(other.blobs_);
            }
          }
        }
        if (!other.blobsLr_.isEmpty()) {
          if (blobsLr_.isEmpty()) {
            blobsLr_ = other.blobsLr_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureBlobsLrIsMutable();
            blobsLr_.addAll(other.blobsLr_);
          }
          onChanged();
        }
        if (!other.weightDecay_.isEmpty()) {
          if (weightDecay_.isEmpty()) {
            weightDecay_ = other.weightDecay_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureWeightDecayIsMutable();
            weightDecay_.addAll(other.weightDecay_);
          }
          onChanged();
        }
        if (other.hasRandSkip()) {
          setRandSkip(other.getRandSkip());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nova.utils.caffe.Caffe.LayerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nova.utils.caffe.Caffe.LayerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // optional string type = 2;
      private java.lang.Object type_ = "";
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }

      // optional uint32 num_output = 3;
      private int numOutput_ ;
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public boolean hasNumOutput() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public int getNumOutput() {
        return numOutput_;
      }
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public Builder setNumOutput(int value) {
        bitField0_ |= 0x00000004;
        numOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public Builder clearNumOutput() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numOutput_ = 0;
        onChanged();
        return this;
      }

      // optional bool biasterm = 4 [default = true];
      private boolean biasterm_ = true;
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean hasBiasterm() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean getBiasterm() {
        return biasterm_;
      }
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder setBiasterm(boolean value) {
        bitField0_ |= 0x00000008;
        biasterm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder clearBiasterm() {
        bitField0_ = (bitField0_ & ~0x00000008);
        biasterm_ = true;
        onChanged();
        return this;
      }

      // optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;
      private com.nova.utils.caffe.Caffe.FillerParameter weightFiller_ = com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.nova.utils.caffe.Caffe.FillerParameter, com.nova.utils.caffe.Caffe.FillerParameter.Builder, com.nova.utils.caffe.Caffe.FillerParameterOrBuilder> weightFillerBuilder_;
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public boolean hasWeightFiller() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.FillerParameter getWeightFiller() {
        if (weightFillerBuilder_ == null) {
          return weightFiller_;
        } else {
          return weightFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(com.nova.utils.caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          weightFiller_ = value;
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(
          com.nova.utils.caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = builderForValue.build();
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder mergeWeightFiller(com.nova.utils.caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              weightFiller_ != com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance()) {
            weightFiller_ =
              com.nova.utils.caffe.Caffe.FillerParameter.newBuilder(weightFiller_).mergeFrom(value).buildPartial();
          } else {
            weightFiller_ = value;
          }
          onChanged();
        } else {
          weightFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder clearWeightFiller() {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.FillerParameter.Builder getWeightFillerBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getWeightFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
        if (weightFillerBuilder_ != null) {
          return weightFillerBuilder_.getMessageOrBuilder();
        } else {
          return weightFiller_;
        }
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nova.utils.caffe.Caffe.FillerParameter, com.nova.utils.caffe.Caffe.FillerParameter.Builder, com.nova.utils.caffe.Caffe.FillerParameterOrBuilder> 
          getWeightFillerFieldBuilder() {
        if (weightFillerBuilder_ == null) {
          weightFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nova.utils.caffe.Caffe.FillerParameter, com.nova.utils.caffe.Caffe.FillerParameter.Builder, com.nova.utils.caffe.Caffe.FillerParameterOrBuilder>(
                  weightFiller_,
                  getParentForChildren(),
                  isClean());
          weightFiller_ = null;
        }
        return weightFillerBuilder_;
      }

      // optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;
      private com.nova.utils.caffe.Caffe.FillerParameter biasFiller_ = com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.nova.utils.caffe.Caffe.FillerParameter, com.nova.utils.caffe.Caffe.FillerParameter.Builder, com.nova.utils.caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(com.nova.utils.caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(
          com.nova.utils.caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder mergeBiasFiller(com.nova.utils.caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              biasFiller_ != com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              com.nova.utils.caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = com.nova.utils.caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .com.nova.utils.caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nova.utils.caffe.Caffe.FillerParameter, com.nova.utils.caffe.Caffe.FillerParameter.Builder, com.nova.utils.caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nova.utils.caffe.Caffe.FillerParameter, com.nova.utils.caffe.Caffe.FillerParameter.Builder, com.nova.utils.caffe.Caffe.FillerParameterOrBuilder>(
                  biasFiller_,
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      // optional uint32 pad = 7 [default = 0];
      private int pad_ ;
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public boolean hasPad() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public int getPad() {
        return pad_;
      }
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public Builder setPad(int value) {
        bitField0_ |= 0x00000040;
        pad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public Builder clearPad() {
        bitField0_ = (bitField0_ & ~0x00000040);
        pad_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 kernelsize = 8;
      private int kernelsize_ ;
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public boolean hasKernelsize() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public int getKernelsize() {
        return kernelsize_;
      }
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder setKernelsize(int value) {
        bitField0_ |= 0x00000080;
        kernelsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder clearKernelsize() {
        bitField0_ = (bitField0_ & ~0x00000080);
        kernelsize_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 group = 9 [default = 1];
      private int group_ = 1;
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public boolean hasGroup() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public int getGroup() {
        return group_;
      }
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder setGroup(int value) {
        bitField0_ |= 0x00000100;
        group_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder clearGroup() {
        bitField0_ = (bitField0_ & ~0x00000100);
        group_ = 1;
        onChanged();
        return this;
      }

      // optional uint32 stride = 10 [default = 1];
      private int stride_ = 1;
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public boolean hasStride() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public int getStride() {
        return stride_;
      }
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder setStride(int value) {
        bitField0_ |= 0x00000200;
        stride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder clearStride() {
        bitField0_ = (bitField0_ & ~0x00000200);
        stride_ = 1;
        onChanged();
        return this;
      }

      // optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];
      private com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod pool_ = com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod.MAX;
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public boolean hasPool() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod getPool() {
        return pool_;
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder setPool(com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        pool_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder clearPool() {
        bitField0_ = (bitField0_ & ~0x00000400);
        pool_ = com.nova.utils.caffe.Caffe.LayerParameter.PoolMethod.MAX;
        onChanged();
        return this;
      }

      // optional float dropout_ratio = 12 [default = 0.5];
      private float dropoutRatio_ = 0.5F;
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public boolean hasDropoutRatio() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public float getDropoutRatio() {
        return dropoutRatio_;
      }
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder setDropoutRatio(float value) {
        bitField0_ |= 0x00000800;
        dropoutRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder clearDropoutRatio() {
        bitField0_ = (bitField0_ & ~0x00000800);
        dropoutRatio_ = 0.5F;
        onChanged();
        return this;
      }

      // optional uint32 local_size = 13 [default = 5];
      private int localSize_ = 5;
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public boolean hasLocalSize() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public int getLocalSize() {
        return localSize_;
      }
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder setLocalSize(int value) {
        bitField0_ |= 0x00001000;
        localSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder clearLocalSize() {
        bitField0_ = (bitField0_ & ~0x00001000);
        localSize_ = 5;
        onChanged();
        return this;
      }

      // optional float alpha = 14 [default = 1];
      private float alpha_ = 1F;
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public boolean hasAlpha() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public float getAlpha() {
        return alpha_;
      }
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder setAlpha(float value) {
        bitField0_ |= 0x00002000;
        alpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder clearAlpha() {
        bitField0_ = (bitField0_ & ~0x00002000);
        alpha_ = 1F;
        onChanged();
        return this;
      }

      // optional float beta = 15 [default = 0.75];
      private float beta_ = 0.75F;
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public boolean hasBeta() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public float getBeta() {
        return beta_;
      }
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder setBeta(float value) {
        bitField0_ |= 0x00004000;
        beta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder clearBeta() {
        bitField0_ = (bitField0_ & ~0x00004000);
        beta_ = 0.75F;
        onChanged();
        return this;
      }

      // optional string source = 16;
      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          source_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00008000);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        source_ = value;
        onChanged();
        return this;
      }

      // optional float scale = 17 [default = 1];
      private float scale_ = 1F;
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00010000;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00010000);
        scale_ = 1F;
        onChanged();
        return this;
      }

      // optional string meanfile = 18;
      private java.lang.Object meanfile_ = "";
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public boolean hasMeanfile() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public java.lang.String getMeanfile() {
        java.lang.Object ref = meanfile_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          meanfile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public com.google.protobuf.ByteString
          getMeanfileBytes() {
        java.lang.Object ref = meanfile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanfile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public Builder setMeanfile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        meanfile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public Builder clearMeanfile() {
        bitField0_ = (bitField0_ & ~0x00020000);
        meanfile_ = getDefaultInstance().getMeanfile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public Builder setMeanfileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        meanfile_ = value;
        onChanged();
        return this;
      }

      // optional uint32 batchsize = 19;
      private int batchsize_ ;
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public boolean hasBatchsize() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public int getBatchsize() {
        return batchsize_;
      }
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public Builder setBatchsize(int value) {
        bitField0_ |= 0x00040000;
        batchsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public Builder clearBatchsize() {
        bitField0_ = (bitField0_ & ~0x00040000);
        batchsize_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cropsize = 20 [default = 0];
      private int cropsize_ ;
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public boolean hasCropsize() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public int getCropsize() {
        return cropsize_;
      }
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder setCropsize(int value) {
        bitField0_ |= 0x00080000;
        cropsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder clearCropsize() {
        bitField0_ = (bitField0_ & ~0x00080000);
        cropsize_ = 0;
        onChanged();
        return this;
      }

      // optional bool mirror = 21 [default = false];
      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00100000;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00100000);
        mirror_ = false;
        onChanged();
        return this;
      }

      // repeated .com.nova.utils.caffe.BlobProto blobs = 50;
      private java.util.List<com.nova.utils.caffe.Caffe.BlobProto> blobs_ =
        java.util.Collections.emptyList();
      private void ensureBlobsIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          blobs_ = new java.util.ArrayList<com.nova.utils.caffe.Caffe.BlobProto>(blobs_);
          bitField0_ |= 0x00200000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.nova.utils.caffe.Caffe.BlobProto, com.nova.utils.caffe.Caffe.BlobProto.Builder, com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> blobsBuilder_;

      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<com.nova.utils.caffe.Caffe.BlobProto> getBlobsList() {
        if (blobsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(blobs_);
        } else {
          return blobsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public int getBlobsCount() {
        if (blobsBuilder_ == null) {
          return blobs_.size();
        } else {
          return blobsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProto getBlobs(int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);
        } else {
          return blobsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder setBlobs(
          int index, com.nova.utils.caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.set(index, value);
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder setBlobs(
          int index, com.nova.utils.caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.set(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(com.nova.utils.caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          int index, com.nova.utils.caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(index, value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          com.nova.utils.caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          int index, com.nova.utils.caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addAllBlobs(
          java.lang.Iterable<? extends com.nova.utils.caffe.Caffe.BlobProto> values) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          super.addAll(values, blobs_);
          onChanged();
        } else {
          blobsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder clearBlobs() {
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
          onChanged();
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder removeBlobs(int index) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.remove(index);
          onChanged();
        } else {
          blobsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProto.Builder getBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
          int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);  } else {
          return blobsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<? extends com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
           getBlobsOrBuilderList() {
        if (blobsBuilder_ != null) {
          return blobsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(blobs_);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProto.Builder addBlobsBuilder() {
        return getBlobsFieldBuilder().addBuilder(
            com.nova.utils.caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProto.Builder addBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().addBuilder(
            index, com.nova.utils.caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<com.nova.utils.caffe.Caffe.BlobProto.Builder> 
           getBlobsBuilderList() {
        return getBlobsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.nova.utils.caffe.Caffe.BlobProto, com.nova.utils.caffe.Caffe.BlobProto.Builder, com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
          getBlobsFieldBuilder() {
        if (blobsBuilder_ == null) {
          blobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.nova.utils.caffe.Caffe.BlobProto, com.nova.utils.caffe.Caffe.BlobProto.Builder, com.nova.utils.caffe.Caffe.BlobProtoOrBuilder>(
                  blobs_,
                  ((bitField0_ & 0x00200000) == 0x00200000),
                  getParentForChildren(),
                  isClean());
          blobs_ = null;
        }
        return blobsBuilder_;
      }

      // repeated float blobs_lr = 51;
      private java.util.List<java.lang.Float> blobsLr_ = java.util.Collections.emptyList();
      private void ensureBlobsLrIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          blobsLr_ = new java.util.ArrayList<java.lang.Float>(blobsLr_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to set
       * the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getBlobsLrList() {
        return java.util.Collections.unmodifiableList(blobsLr_);
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to set
       * the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public int getBlobsLrCount() {
        return blobsLr_.size();
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to set
       * the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public float getBlobsLr(int index) {
        return blobsLr_.get(index);
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to set
       * the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder setBlobsLr(
          int index, float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to set
       * the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder addBlobsLr(float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to set
       * the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder addAllBlobsLr(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureBlobsLrIsMutable();
        super.addAll(values, blobsLr_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to set
       * the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder clearBlobsLr() {
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // repeated float weight_decay = 52;
      private java.util.List<java.lang.Float> weightDecay_ = java.util.Collections.emptyList();
      private void ensureWeightDecayIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          weightDecay_ = new java.util.ArrayList<java.lang.Float>(weightDecay_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getWeightDecayList() {
        return java.util.Collections.unmodifiableList(weightDecay_);
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public int getWeightDecayCount() {
        return weightDecay_.size();
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public float getWeightDecay(int index) {
        return weightDecay_.get(index);
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder setWeightDecay(
          int index, float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder addWeightDecay(float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder addAllWeightDecay(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureWeightDecayIsMutable();
        super.addAll(values, weightDecay_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder clearWeightDecay() {
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      // optional uint32 rand_skip = 53 [default = 0];
      private int randSkip_ ;
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public boolean hasRandSkip() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public int getRandSkip() {
        return randSkip_;
      }
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public Builder setRandSkip(int value) {
        bitField0_ |= 0x01000000;
        randSkip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public Builder clearRandSkip() {
        bitField0_ = (bitField0_ & ~0x01000000);
        randSkip_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.nova.utils.caffe.LayerParameter)
    }

    static {
      defaultInstance = new LayerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.nova.utils.caffe.LayerParameter)
  }

  public interface LayerConnectionOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .com.nova.utils.caffe.LayerParameter layer = 1;
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
     *
     * <pre>
     * the layer parameter
     * </pre>
     */
    boolean hasLayer();
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
     *
     * <pre>
     * the layer parameter
     * </pre>
     */
    com.nova.utils.caffe.Caffe.LayerParameter getLayer();
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
     *
     * <pre>
     * the layer parameter
     * </pre>
     */
    com.nova.utils.caffe.Caffe.LayerParameterOrBuilder getLayerOrBuilder();

    // repeated string bottom = 2;
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    java.util.List<java.lang.String>
    getBottomList();
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    int getBottomCount();
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    java.lang.String getBottom(int index);
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    com.google.protobuf.ByteString
        getBottomBytes(int index);

    // repeated string top = 3;
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    java.util.List<java.lang.String>
    getTopList();
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    int getTopCount();
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    java.lang.String getTop(int index);
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    com.google.protobuf.ByteString
        getTopBytes(int index);
  }
  /**
   * Protobuf type {@code com.nova.utils.caffe.LayerConnection}
   */
  public static final class LayerConnection extends
      com.google.protobuf.GeneratedMessage
      implements LayerConnectionOrBuilder {
    // Use LayerConnection.newBuilder() to construct.
    private LayerConnection(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LayerConnection(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LayerConnection defaultInstance;
    public static LayerConnection getDefaultInstance() {
      return defaultInstance;
    }

    public LayerConnection getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LayerConnection(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nova.utils.caffe.Caffe.LayerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = layer_.toBuilder();
              }
              layer_ = input.readMessage(com.nova.utils.caffe.Caffe.LayerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(layer_);
                layer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                bottom_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              bottom_.add(input.readBytes());
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                top_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              top_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          bottom_ = new com.google.protobuf.UnmodifiableLazyStringList(bottom_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          top_ = new com.google.protobuf.UnmodifiableLazyStringList(top_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerConnection_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerConnection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nova.utils.caffe.Caffe.LayerConnection.class, com.nova.utils.caffe.Caffe.LayerConnection.Builder.class);
    }

    public static com.google.protobuf.Parser<LayerConnection> PARSER =
        new com.google.protobuf.AbstractParser<LayerConnection>() {
      public LayerConnection parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LayerConnection(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LayerConnection> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .com.nova.utils.caffe.LayerParameter layer = 1;
    public static final int LAYER_FIELD_NUMBER = 1;
    private com.nova.utils.caffe.Caffe.LayerParameter layer_;
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
     *
     * <pre>
     * the layer parameter
     * </pre>
     */
    public boolean hasLayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
     *
     * <pre>
     * the layer parameter
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.LayerParameter getLayer() {
      return layer_;
    }
    /**
     * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
     *
     * <pre>
     * the layer parameter
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.LayerParameterOrBuilder getLayerOrBuilder() {
      return layer_;
    }

    // repeated string bottom = 2;
    public static final int BOTTOM_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList bottom_;
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    public java.util.List<java.lang.String>
        getBottomList() {
      return bottom_;
    }
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    public int getBottomCount() {
      return bottom_.size();
    }
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    public java.lang.String getBottom(int index) {
      return bottom_.get(index);
    }
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    public com.google.protobuf.ByteString
        getBottomBytes(int index) {
      return bottom_.getByteString(index);
    }

    // repeated string top = 3;
    public static final int TOP_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList top_;
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    public java.util.List<java.lang.String>
        getTopList() {
      return top_;
    }
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    public int getTopCount() {
      return top_.size();
    }
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    public java.lang.String getTop(int index) {
      return top_.get(index);
    }
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTopBytes(int index) {
      return top_.getByteString(index);
    }

    private void initFields() {
      layer_ = com.nova.utils.caffe.Caffe.LayerParameter.getDefaultInstance();
      bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, layer_);
      }
      for (int i = 0; i < bottom_.size(); i++) {
        output.writeBytes(2, bottom_.getByteString(i));
      }
      for (int i = 0; i < top_.size(); i++) {
        output.writeBytes(3, top_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, layer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bottom_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(bottom_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getBottomList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < top_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(top_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getTopList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.nova.utils.caffe.Caffe.LayerConnection parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.LayerConnection parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.LayerConnection parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.LayerConnection parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.LayerConnection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.LayerConnection parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.LayerConnection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.LayerConnection parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.LayerConnection parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.LayerConnection parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.nova.utils.caffe.Caffe.LayerConnection prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.nova.utils.caffe.LayerConnection}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerConnection_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerConnection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nova.utils.caffe.Caffe.LayerConnection.class, com.nova.utils.caffe.Caffe.LayerConnection.Builder.class);
      }

      // Construct using com.nova.utils.caffe.Caffe.LayerConnection.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLayerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (layerBuilder_ == null) {
          layer_ = com.nova.utils.caffe.Caffe.LayerParameter.getDefaultInstance();
        } else {
          layerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_LayerConnection_descriptor;
      }

      public com.nova.utils.caffe.Caffe.LayerConnection getDefaultInstanceForType() {
        return com.nova.utils.caffe.Caffe.LayerConnection.getDefaultInstance();
      }

      public com.nova.utils.caffe.Caffe.LayerConnection build() {
        com.nova.utils.caffe.Caffe.LayerConnection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nova.utils.caffe.Caffe.LayerConnection buildPartial() {
        com.nova.utils.caffe.Caffe.LayerConnection result = new com.nova.utils.caffe.Caffe.LayerConnection(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (layerBuilder_ == null) {
          result.layer_ = layer_;
        } else {
          result.layer_ = layerBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          bottom_ = new com.google.protobuf.UnmodifiableLazyStringList(
              bottom_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bottom_ = bottom_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          top_ = new com.google.protobuf.UnmodifiableLazyStringList(
              top_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.top_ = top_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nova.utils.caffe.Caffe.LayerConnection) {
          return mergeFrom((com.nova.utils.caffe.Caffe.LayerConnection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nova.utils.caffe.Caffe.LayerConnection other) {
        if (other == com.nova.utils.caffe.Caffe.LayerConnection.getDefaultInstance()) return this;
        if (other.hasLayer()) {
          mergeLayer(other.getLayer());
        }
        if (!other.bottom_.isEmpty()) {
          if (bottom_.isEmpty()) {
            bottom_ = other.bottom_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBottomIsMutable();
            bottom_.addAll(other.bottom_);
          }
          onChanged();
        }
        if (!other.top_.isEmpty()) {
          if (top_.isEmpty()) {
            top_ = other.top_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureTopIsMutable();
            top_.addAll(other.top_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nova.utils.caffe.Caffe.LayerConnection parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nova.utils.caffe.Caffe.LayerConnection) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .com.nova.utils.caffe.LayerParameter layer = 1;
      private com.nova.utils.caffe.Caffe.LayerParameter layer_ = com.nova.utils.caffe.Caffe.LayerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.nova.utils.caffe.Caffe.LayerParameter, com.nova.utils.caffe.Caffe.LayerParameter.Builder, com.nova.utils.caffe.Caffe.LayerParameterOrBuilder> layerBuilder_;
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
       *
       * <pre>
       * the layer parameter
       * </pre>
       */
      public boolean hasLayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
       *
       * <pre>
       * the layer parameter
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.LayerParameter getLayer() {
        if (layerBuilder_ == null) {
          return layer_;
        } else {
          return layerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
       *
       * <pre>
       * the layer parameter
       * </pre>
       */
      public Builder setLayer(com.nova.utils.caffe.Caffe.LayerParameter value) {
        if (layerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          layer_ = value;
          onChanged();
        } else {
          layerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
       *
       * <pre>
       * the layer parameter
       * </pre>
       */
      public Builder setLayer(
          com.nova.utils.caffe.Caffe.LayerParameter.Builder builderForValue) {
        if (layerBuilder_ == null) {
          layer_ = builderForValue.build();
          onChanged();
        } else {
          layerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
       *
       * <pre>
       * the layer parameter
       * </pre>
       */
      public Builder mergeLayer(com.nova.utils.caffe.Caffe.LayerParameter value) {
        if (layerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              layer_ != com.nova.utils.caffe.Caffe.LayerParameter.getDefaultInstance()) {
            layer_ =
              com.nova.utils.caffe.Caffe.LayerParameter.newBuilder(layer_).mergeFrom(value).buildPartial();
          } else {
            layer_ = value;
          }
          onChanged();
        } else {
          layerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
       *
       * <pre>
       * the layer parameter
       * </pre>
       */
      public Builder clearLayer() {
        if (layerBuilder_ == null) {
          layer_ = com.nova.utils.caffe.Caffe.LayerParameter.getDefaultInstance();
          onChanged();
        } else {
          layerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
       *
       * <pre>
       * the layer parameter
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.LayerParameter.Builder getLayerBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
       *
       * <pre>
       * the layer parameter
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.LayerParameterOrBuilder getLayerOrBuilder() {
        if (layerBuilder_ != null) {
          return layerBuilder_.getMessageOrBuilder();
        } else {
          return layer_;
        }
      }
      /**
       * <code>optional .com.nova.utils.caffe.LayerParameter layer = 1;</code>
       *
       * <pre>
       * the layer parameter
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nova.utils.caffe.Caffe.LayerParameter, com.nova.utils.caffe.Caffe.LayerParameter.Builder, com.nova.utils.caffe.Caffe.LayerParameterOrBuilder> 
          getLayerFieldBuilder() {
        if (layerBuilder_ == null) {
          layerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nova.utils.caffe.Caffe.LayerParameter, com.nova.utils.caffe.Caffe.LayerParameter.Builder, com.nova.utils.caffe.Caffe.LayerParameterOrBuilder>(
                  layer_,
                  getParentForChildren(),
                  isClean());
          layer_ = null;
        }
        return layerBuilder_;
      }

      // repeated string bottom = 2;
      private com.google.protobuf.LazyStringList bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureBottomIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          bottom_ = new com.google.protobuf.LazyStringArrayList(bottom_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public java.util.List<java.lang.String>
          getBottomList() {
        return java.util.Collections.unmodifiableList(bottom_);
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public int getBottomCount() {
        return bottom_.size();
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public java.lang.String getBottom(int index) {
        return bottom_.get(index);
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public com.google.protobuf.ByteString
          getBottomBytes(int index) {
        return bottom_.getByteString(index);
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder setBottom(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder addBottom(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder addAllBottom(
          java.lang.Iterable<java.lang.String> values) {
        ensureBottomIsMutable();
        super.addAll(values, bottom_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder clearBottom() {
        bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder addBottomBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.add(value);
        onChanged();
        return this;
      }

      // repeated string top = 3;
      private com.google.protobuf.LazyStringList top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTopIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          top_ = new com.google.protobuf.LazyStringArrayList(top_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public java.util.List<java.lang.String>
          getTopList() {
        return java.util.Collections.unmodifiableList(top_);
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public int getTopCount() {
        return top_.size();
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public java.lang.String getTop(int index) {
        return top_.get(index);
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTopBytes(int index) {
        return top_.getByteString(index);
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder setTop(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder addTop(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder addAllTop(
          java.lang.Iterable<java.lang.String> values) {
        ensureTopIsMutable();
        super.addAll(values, top_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder clearTop() {
        top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder addTopBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.nova.utils.caffe.LayerConnection)
    }

    static {
      defaultInstance = new LayerConnection(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.nova.utils.caffe.LayerConnection)
  }

  public interface NetParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string name = 1;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // repeated .com.nova.utils.caffe.LayerConnection layers = 2;
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    java.util.List<com.nova.utils.caffe.Caffe.LayerConnection> 
        getLayersList();
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    com.nova.utils.caffe.Caffe.LayerConnection getLayers(int index);
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    int getLayersCount();
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    java.util.List<? extends com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder> 
        getLayersOrBuilderList();
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder getLayersOrBuilder(
        int index);

    // repeated string input = 3;
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    java.util.List<java.lang.String>
    getInputList();
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    int getInputCount();
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    java.lang.String getInput(int index);
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    com.google.protobuf.ByteString
        getInputBytes(int index);

    // repeated int32 input_dim = 4;
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    java.util.List<java.lang.Integer> getInputDimList();
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    int getInputDimCount();
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    int getInputDim(int index);

    // optional bool force_backward = 5 [default = false];
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    boolean hasForceBackward();
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    boolean getForceBackward();
  }
  /**
   * Protobuf type {@code com.nova.utils.caffe.NetParameter}
   */
  public static final class NetParameter extends
      com.google.protobuf.GeneratedMessage
      implements NetParameterOrBuilder {
    // Use NetParameter.newBuilder() to construct.
    private NetParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NetParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NetParameter defaultInstance;
    public static NetParameter getDefaultInstance() {
      return defaultInstance;
    }

    public NetParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NetParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                layers_ = new java.util.ArrayList<com.nova.utils.caffe.Caffe.LayerConnection>();
                mutable_bitField0_ |= 0x00000002;
              }
              layers_.add(input.readMessage(com.nova.utils.caffe.Caffe.LayerConnection.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                input_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              input_.add(input.readBytes());
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                inputDim_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              inputDim_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                inputDim_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                inputDim_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              forceBackward_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          layers_ = java.util.Collections.unmodifiableList(layers_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          input_ = new com.google.protobuf.UnmodifiableLazyStringList(input_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          inputDim_ = java.util.Collections.unmodifiableList(inputDim_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_NetParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_NetParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nova.utils.caffe.Caffe.NetParameter.class, com.nova.utils.caffe.Caffe.NetParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<NetParameter> PARSER =
        new com.google.protobuf.AbstractParser<NetParameter>() {
      public NetParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NetParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NetParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated .com.nova.utils.caffe.LayerConnection layers = 2;
    public static final int LAYERS_FIELD_NUMBER = 2;
    private java.util.List<com.nova.utils.caffe.Caffe.LayerConnection> layers_;
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public java.util.List<com.nova.utils.caffe.Caffe.LayerConnection> getLayersList() {
      return layers_;
    }
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public java.util.List<? extends com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder> 
        getLayersOrBuilderList() {
      return layers_;
    }
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public int getLayersCount() {
      return layers_.size();
    }
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.LayerConnection getLayers(int index) {
      return layers_.get(index);
    }
    /**
     * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder getLayersOrBuilder(
        int index) {
      return layers_.get(index);
    }

    // repeated string input = 3;
    public static final int INPUT_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList input_;
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    public java.util.List<java.lang.String>
        getInputList() {
      return input_;
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    public int getInputCount() {
      return input_.size();
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    public java.lang.String getInput(int index) {
      return input_.get(index);
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getInputBytes(int index) {
      return input_.getByteString(index);
    }

    // repeated int32 input_dim = 4;
    public static final int INPUT_DIM_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> inputDim_;
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getInputDimList() {
      return inputDim_;
    }
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    public int getInputDimCount() {
      return inputDim_.size();
    }
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    public int getInputDim(int index) {
      return inputDim_.get(index);
    }

    // optional bool force_backward = 5 [default = false];
    public static final int FORCE_BACKWARD_FIELD_NUMBER = 5;
    private boolean forceBackward_;
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    public boolean hasForceBackward() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    public boolean getForceBackward() {
      return forceBackward_;
    }

    private void initFields() {
      name_ = "";
      layers_ = java.util.Collections.emptyList();
      input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      inputDim_ = java.util.Collections.emptyList();
      forceBackward_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      for (int i = 0; i < layers_.size(); i++) {
        output.writeMessage(2, layers_.get(i));
      }
      for (int i = 0; i < input_.size(); i++) {
        output.writeBytes(3, input_.getByteString(i));
      }
      for (int i = 0; i < inputDim_.size(); i++) {
        output.writeInt32(4, inputDim_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(5, forceBackward_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      for (int i = 0; i < layers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, layers_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < input_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(input_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getInputList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < inputDim_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(inputDim_.get(i));
        }
        size += dataSize;
        size += 1 * getInputDimList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, forceBackward_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.nova.utils.caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.NetParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.NetParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.NetParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.NetParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.NetParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.NetParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.nova.utils.caffe.Caffe.NetParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.nova.utils.caffe.NetParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.nova.utils.caffe.Caffe.NetParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_NetParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_NetParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nova.utils.caffe.Caffe.NetParameter.class, com.nova.utils.caffe.Caffe.NetParameter.Builder.class);
      }

      // Construct using com.nova.utils.caffe.Caffe.NetParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (layersBuilder_ == null) {
          layers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          layersBuilder_.clear();
        }
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        inputDim_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        forceBackward_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_NetParameter_descriptor;
      }

      public com.nova.utils.caffe.Caffe.NetParameter getDefaultInstanceForType() {
        return com.nova.utils.caffe.Caffe.NetParameter.getDefaultInstance();
      }

      public com.nova.utils.caffe.Caffe.NetParameter build() {
        com.nova.utils.caffe.Caffe.NetParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nova.utils.caffe.Caffe.NetParameter buildPartial() {
        com.nova.utils.caffe.Caffe.NetParameter result = new com.nova.utils.caffe.Caffe.NetParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (layersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            layers_ = java.util.Collections.unmodifiableList(layers_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.layers_ = layers_;
        } else {
          result.layers_ = layersBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          input_ = new com.google.protobuf.UnmodifiableLazyStringList(
              input_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.input_ = input_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          inputDim_ = java.util.Collections.unmodifiableList(inputDim_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.inputDim_ = inputDim_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.forceBackward_ = forceBackward_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nova.utils.caffe.Caffe.NetParameter) {
          return mergeFrom((com.nova.utils.caffe.Caffe.NetParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nova.utils.caffe.Caffe.NetParameter other) {
        if (other == com.nova.utils.caffe.Caffe.NetParameter.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (layersBuilder_ == null) {
          if (!other.layers_.isEmpty()) {
            if (layers_.isEmpty()) {
              layers_ = other.layers_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureLayersIsMutable();
              layers_.addAll(other.layers_);
            }
            onChanged();
          }
        } else {
          if (!other.layers_.isEmpty()) {
            if (layersBuilder_.isEmpty()) {
              layersBuilder_.dispose();
              layersBuilder_ = null;
              layers_ = other.layers_;
              bitField0_ = (bitField0_ & ~0x00000002);
              layersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLayersFieldBuilder() : null;
            } else {
              layersBuilder_.addAllMessages(other.layers_);
            }
          }
        }
        if (!other.input_.isEmpty()) {
          if (input_.isEmpty()) {
            input_ = other.input_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureInputIsMutable();
            input_.addAll(other.input_);
          }
          onChanged();
        }
        if (!other.inputDim_.isEmpty()) {
          if (inputDim_.isEmpty()) {
            inputDim_ = other.inputDim_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureInputDimIsMutable();
            inputDim_.addAll(other.inputDim_);
          }
          onChanged();
        }
        if (other.hasForceBackward()) {
          setForceBackward(other.getForceBackward());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nova.utils.caffe.Caffe.NetParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nova.utils.caffe.Caffe.NetParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // repeated .com.nova.utils.caffe.LayerConnection layers = 2;
      private java.util.List<com.nova.utils.caffe.Caffe.LayerConnection> layers_ =
        java.util.Collections.emptyList();
      private void ensureLayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          layers_ = new java.util.ArrayList<com.nova.utils.caffe.Caffe.LayerConnection>(layers_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.nova.utils.caffe.Caffe.LayerConnection, com.nova.utils.caffe.Caffe.LayerConnection.Builder, com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder> layersBuilder_;

      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public java.util.List<com.nova.utils.caffe.Caffe.LayerConnection> getLayersList() {
        if (layersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(layers_);
        } else {
          return layersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public int getLayersCount() {
        if (layersBuilder_ == null) {
          return layers_.size();
        } else {
          return layersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.LayerConnection getLayers(int index) {
        if (layersBuilder_ == null) {
          return layers_.get(index);
        } else {
          return layersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder setLayers(
          int index, com.nova.utils.caffe.Caffe.LayerConnection value) {
        if (layersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers_.set(index, value);
          onChanged();
        } else {
          layersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder setLayers(
          int index, com.nova.utils.caffe.Caffe.LayerConnection.Builder builderForValue) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.set(index, builderForValue.build());
          onChanged();
        } else {
          layersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addLayers(com.nova.utils.caffe.Caffe.LayerConnection value) {
        if (layersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers_.add(value);
          onChanged();
        } else {
          layersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addLayers(
          int index, com.nova.utils.caffe.Caffe.LayerConnection value) {
        if (layersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers_.add(index, value);
          onChanged();
        } else {
          layersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addLayers(
          com.nova.utils.caffe.Caffe.LayerConnection.Builder builderForValue) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.add(builderForValue.build());
          onChanged();
        } else {
          layersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addLayers(
          int index, com.nova.utils.caffe.Caffe.LayerConnection.Builder builderForValue) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.add(index, builderForValue.build());
          onChanged();
        } else {
          layersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addAllLayers(
          java.lang.Iterable<? extends com.nova.utils.caffe.Caffe.LayerConnection> values) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          super.addAll(values, layers_);
          onChanged();
        } else {
          layersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder clearLayers() {
        if (layersBuilder_ == null) {
          layers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          layersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder removeLayers(int index) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.remove(index);
          onChanged();
        } else {
          layersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.LayerConnection.Builder getLayersBuilder(
          int index) {
        return getLayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder getLayersOrBuilder(
          int index) {
        if (layersBuilder_ == null) {
          return layers_.get(index);  } else {
          return layersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public java.util.List<? extends com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder> 
           getLayersOrBuilderList() {
        if (layersBuilder_ != null) {
          return layersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(layers_);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.LayerConnection.Builder addLayersBuilder() {
        return getLayersFieldBuilder().addBuilder(
            com.nova.utils.caffe.Caffe.LayerConnection.getDefaultInstance());
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.LayerConnection.Builder addLayersBuilder(
          int index) {
        return getLayersFieldBuilder().addBuilder(
            index, com.nova.utils.caffe.Caffe.LayerConnection.getDefaultInstance());
      }
      /**
       * <code>repeated .com.nova.utils.caffe.LayerConnection layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public java.util.List<com.nova.utils.caffe.Caffe.LayerConnection.Builder> 
           getLayersBuilderList() {
        return getLayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.nova.utils.caffe.Caffe.LayerConnection, com.nova.utils.caffe.Caffe.LayerConnection.Builder, com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder> 
          getLayersFieldBuilder() {
        if (layersBuilder_ == null) {
          layersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.nova.utils.caffe.Caffe.LayerConnection, com.nova.utils.caffe.Caffe.LayerConnection.Builder, com.nova.utils.caffe.Caffe.LayerConnectionOrBuilder>(
                  layers_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          layers_ = null;
        }
        return layersBuilder_;
      }

      // repeated string input = 3;
      private com.google.protobuf.LazyStringList input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInputIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          input_ = new com.google.protobuf.LazyStringArrayList(input_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public java.util.List<java.lang.String>
          getInputList() {
        return java.util.Collections.unmodifiableList(input_);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public int getInputCount() {
        return input_.size();
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public java.lang.String getInput(int index) {
        return input_.get(index);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getInputBytes(int index) {
        return input_.getByteString(index);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder setInput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder addInput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder addAllInput(
          java.lang.Iterable<java.lang.String> values) {
        ensureInputIsMutable();
        super.addAll(values, input_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder clearInput() {
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder addInputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }

      // repeated int32 input_dim = 4;
      private java.util.List<java.lang.Integer> inputDim_ = java.util.Collections.emptyList();
      private void ensureInputDimIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          inputDim_ = new java.util.ArrayList<java.lang.Integer>(inputDim_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getInputDimList() {
        return java.util.Collections.unmodifiableList(inputDim_);
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public int getInputDimCount() {
        return inputDim_.size();
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public int getInputDim(int index) {
        return inputDim_.get(index);
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder setInputDim(
          int index, int value) {
        ensureInputDimIsMutable();
        inputDim_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder addInputDim(int value) {
        ensureInputDimIsMutable();
        inputDim_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder addAllInputDim(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInputDimIsMutable();
        super.addAll(values, inputDim_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder clearInputDim() {
        inputDim_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional bool force_backward = 5 [default = false];
      private boolean forceBackward_ ;
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public boolean hasForceBackward() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public boolean getForceBackward() {
        return forceBackward_;
      }
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public Builder setForceBackward(boolean value) {
        bitField0_ |= 0x00000010;
        forceBackward_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public Builder clearForceBackward() {
        bitField0_ = (bitField0_ & ~0x00000010);
        forceBackward_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.nova.utils.caffe.NetParameter)
    }

    static {
      defaultInstance = new NetParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.nova.utils.caffe.NetParameter)
  }

  public interface SolverParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string train_net = 1;
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    boolean hasTrainNet();
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    java.lang.String getTrainNet();
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTrainNetBytes();

    // optional string test_net = 2;
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    boolean hasTestNet();
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    java.lang.String getTestNet();
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTestNetBytes();

    // optional int32 test_iter = 3 [default = 0];
    /**
     * <code>optional int32 test_iter = 3 [default = 0];</code>
     *
     * <pre>
     * The number of iterations for each testing phase.
     * </pre>
     */
    boolean hasTestIter();
    /**
     * <code>optional int32 test_iter = 3 [default = 0];</code>
     *
     * <pre>
     * The number of iterations for each testing phase.
     * </pre>
     */
    int getTestIter();

    // optional int32 test_interval = 4 [default = 0];
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    boolean hasTestInterval();
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    int getTestInterval();

    // optional float base_lr = 5;
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    boolean hasBaseLr();
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    float getBaseLr();

    // optional int32 display = 6;
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    boolean hasDisplay();
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    int getDisplay();

    // optional int32 max_iter = 7;
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    boolean hasMaxIter();
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    int getMaxIter();

    // optional string lr_policy = 8;
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    boolean hasLrPolicy();
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    java.lang.String getLrPolicy();
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLrPolicyBytes();

    // optional float gamma = 9;
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    boolean hasGamma();
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    float getGamma();

    // optional float power = 10;
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    boolean hasPower();
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    float getPower();

    // optional float momentum = 11;
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    boolean hasMomentum();
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    float getMomentum();

    // optional float weight_decay = 12;
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    boolean hasWeightDecay();
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    float getWeightDecay();

    // optional int32 stepsize = 13;
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    boolean hasStepsize();
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    int getStepsize();

    // optional int32 snapshot = 14 [default = 0];
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    boolean hasSnapshot();
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    int getSnapshot();

    // optional string snapshot_prefix = 15;
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    boolean hasSnapshotPrefix();
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    java.lang.String getSnapshotPrefix();
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSnapshotPrefixBytes();

    // optional bool snapshot_diff = 16 [default = false];
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    boolean hasSnapshotDiff();
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    boolean getSnapshotDiff();

    // optional int32 solver_mode = 17 [default = 1];
    /**
     * <code>optional int32 solver_mode = 17 [default = 1];</code>
     *
     * <pre>
     * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
     * </pre>
     */
    boolean hasSolverMode();
    /**
     * <code>optional int32 solver_mode = 17 [default = 1];</code>
     *
     * <pre>
     * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
     * </pre>
     */
    int getSolverMode();

    // optional int32 device_id = 18 [default = 0];
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id=0 in default.
     * </pre>
     */
    boolean hasDeviceId();
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id=0 in default.
     * </pre>
     */
    int getDeviceId();
  }
  /**
   * Protobuf type {@code com.nova.utils.caffe.SolverParameter}
   */
  public static final class SolverParameter extends
      com.google.protobuf.GeneratedMessage
      implements SolverParameterOrBuilder {
    // Use SolverParameter.newBuilder() to construct.
    private SolverParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SolverParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SolverParameter defaultInstance;
    public static SolverParameter getDefaultInstance() {
      return defaultInstance;
    }

    public SolverParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SolverParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              trainNet_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              testNet_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              testIter_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              testInterval_ = input.readInt32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              baseLr_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              display_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              maxIter_ = input.readInt32();
              break;
            }
            case 66: {
              bitField0_ |= 0x00000080;
              lrPolicy_ = input.readBytes();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              gamma_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              power_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              momentum_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              weightDecay_ = input.readFloat();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              stepsize_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              snapshot_ = input.readInt32();
              break;
            }
            case 122: {
              bitField0_ |= 0x00004000;
              snapshotPrefix_ = input.readBytes();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              snapshotDiff_ = input.readBool();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              solverMode_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              deviceId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nova.utils.caffe.Caffe.SolverParameter.class, com.nova.utils.caffe.Caffe.SolverParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<SolverParameter> PARSER =
        new com.google.protobuf.AbstractParser<SolverParameter>() {
      public SolverParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SolverParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SolverParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string train_net = 1;
    public static final int TRAIN_NET_FIELD_NUMBER = 1;
    private java.lang.Object trainNet_;
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    public boolean hasTrainNet() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    public java.lang.String getTrainNet() {
      java.lang.Object ref = trainNet_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          trainNet_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTrainNetBytes() {
      java.lang.Object ref = trainNet_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        trainNet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string test_net = 2;
    public static final int TEST_NET_FIELD_NUMBER = 2;
    private java.lang.Object testNet_;
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    public boolean hasTestNet() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    public java.lang.String getTestNet() {
      java.lang.Object ref = testNet_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          testNet_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTestNetBytes() {
      java.lang.Object ref = testNet_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        testNet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 test_iter = 3 [default = 0];
    public static final int TEST_ITER_FIELD_NUMBER = 3;
    private int testIter_;
    /**
     * <code>optional int32 test_iter = 3 [default = 0];</code>
     *
     * <pre>
     * The number of iterations for each testing phase.
     * </pre>
     */
    public boolean hasTestIter() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 test_iter = 3 [default = 0];</code>
     *
     * <pre>
     * The number of iterations for each testing phase.
     * </pre>
     */
    public int getTestIter() {
      return testIter_;
    }

    // optional int32 test_interval = 4 [default = 0];
    public static final int TEST_INTERVAL_FIELD_NUMBER = 4;
    private int testInterval_;
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    public boolean hasTestInterval() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    public int getTestInterval() {
      return testInterval_;
    }

    // optional float base_lr = 5;
    public static final int BASE_LR_FIELD_NUMBER = 5;
    private float baseLr_;
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    public boolean hasBaseLr() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    public float getBaseLr() {
      return baseLr_;
    }

    // optional int32 display = 6;
    public static final int DISPLAY_FIELD_NUMBER = 6;
    private int display_;
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    public boolean hasDisplay() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    public int getDisplay() {
      return display_;
    }

    // optional int32 max_iter = 7;
    public static final int MAX_ITER_FIELD_NUMBER = 7;
    private int maxIter_;
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    public boolean hasMaxIter() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    public int getMaxIter() {
      return maxIter_;
    }

    // optional string lr_policy = 8;
    public static final int LR_POLICY_FIELD_NUMBER = 8;
    private java.lang.Object lrPolicy_;
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    public boolean hasLrPolicy() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    public java.lang.String getLrPolicy() {
      java.lang.Object ref = lrPolicy_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          lrPolicy_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLrPolicyBytes() {
      java.lang.Object ref = lrPolicy_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        lrPolicy_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float gamma = 9;
    public static final int GAMMA_FIELD_NUMBER = 9;
    private float gamma_;
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public boolean hasGamma() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public float getGamma() {
      return gamma_;
    }

    // optional float power = 10;
    public static final int POWER_FIELD_NUMBER = 10;
    private float power_;
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public boolean hasPower() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public float getPower() {
      return power_;
    }

    // optional float momentum = 11;
    public static final int MOMENTUM_FIELD_NUMBER = 11;
    private float momentum_;
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    public boolean hasMomentum() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    public float getMomentum() {
      return momentum_;
    }

    // optional float weight_decay = 12;
    public static final int WEIGHT_DECAY_FIELD_NUMBER = 12;
    private float weightDecay_;
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    public boolean hasWeightDecay() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    public float getWeightDecay() {
      return weightDecay_;
    }

    // optional int32 stepsize = 13;
    public static final int STEPSIZE_FIELD_NUMBER = 13;
    private int stepsize_;
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    public boolean hasStepsize() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    public int getStepsize() {
      return stepsize_;
    }

    // optional int32 snapshot = 14 [default = 0];
    public static final int SNAPSHOT_FIELD_NUMBER = 14;
    private int snapshot_;
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    public boolean hasSnapshot() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    public int getSnapshot() {
      return snapshot_;
    }

    // optional string snapshot_prefix = 15;
    public static final int SNAPSHOT_PREFIX_FIELD_NUMBER = 15;
    private java.lang.Object snapshotPrefix_;
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    public boolean hasSnapshotPrefix() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    public java.lang.String getSnapshotPrefix() {
      java.lang.Object ref = snapshotPrefix_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          snapshotPrefix_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSnapshotPrefixBytes() {
      java.lang.Object ref = snapshotPrefix_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        snapshotPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bool snapshot_diff = 16 [default = false];
    public static final int SNAPSHOT_DIFF_FIELD_NUMBER = 16;
    private boolean snapshotDiff_;
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    public boolean hasSnapshotDiff() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    public boolean getSnapshotDiff() {
      return snapshotDiff_;
    }

    // optional int32 solver_mode = 17 [default = 1];
    public static final int SOLVER_MODE_FIELD_NUMBER = 17;
    private int solverMode_;
    /**
     * <code>optional int32 solver_mode = 17 [default = 1];</code>
     *
     * <pre>
     * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
     * </pre>
     */
    public boolean hasSolverMode() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 solver_mode = 17 [default = 1];</code>
     *
     * <pre>
     * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
     * </pre>
     */
    public int getSolverMode() {
      return solverMode_;
    }

    // optional int32 device_id = 18 [default = 0];
    public static final int DEVICE_ID_FIELD_NUMBER = 18;
    private int deviceId_;
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id=0 in default.
     * </pre>
     */
    public boolean hasDeviceId() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id=0 in default.
     * </pre>
     */
    public int getDeviceId() {
      return deviceId_;
    }

    private void initFields() {
      trainNet_ = "";
      testNet_ = "";
      testIter_ = 0;
      testInterval_ = 0;
      baseLr_ = 0F;
      display_ = 0;
      maxIter_ = 0;
      lrPolicy_ = "";
      gamma_ = 0F;
      power_ = 0F;
      momentum_ = 0F;
      weightDecay_ = 0F;
      stepsize_ = 0;
      snapshot_ = 0;
      snapshotPrefix_ = "";
      snapshotDiff_ = false;
      solverMode_ = 1;
      deviceId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTrainNetBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTestNetBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, testIter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, testInterval_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, baseLr_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, display_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, maxIter_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getLrPolicyBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, gamma_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, power_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, momentum_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, weightDecay_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, stepsize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, snapshot_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBytes(15, getSnapshotPrefixBytes());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBool(16, snapshotDiff_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(17, solverMode_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, deviceId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTrainNetBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTestNetBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, testIter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, testInterval_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, baseLr_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, display_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, maxIter_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getLrPolicyBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, gamma_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, power_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, momentum_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, weightDecay_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, stepsize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, snapshot_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, getSnapshotPrefixBytes());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, snapshotDiff_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, solverMode_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, deviceId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.nova.utils.caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.SolverParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.SolverParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.SolverParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.SolverParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.SolverParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.SolverParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.nova.utils.caffe.Caffe.SolverParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.nova.utils.caffe.SolverParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.nova.utils.caffe.Caffe.SolverParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nova.utils.caffe.Caffe.SolverParameter.class, com.nova.utils.caffe.Caffe.SolverParameter.Builder.class);
      }

      // Construct using com.nova.utils.caffe.Caffe.SolverParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        trainNet_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        testNet_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        testIter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        testInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        baseLr_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        display_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        maxIter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        lrPolicy_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        gamma_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        power_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        momentum_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        weightDecay_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        stepsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        snapshot_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        snapshotPrefix_ = "";
        bitField0_ = (bitField0_ & ~0x00004000);
        snapshotDiff_ = false;
        bitField0_ = (bitField0_ & ~0x00008000);
        solverMode_ = 1;
        bitField0_ = (bitField0_ & ~0x00010000);
        deviceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverParameter_descriptor;
      }

      public com.nova.utils.caffe.Caffe.SolverParameter getDefaultInstanceForType() {
        return com.nova.utils.caffe.Caffe.SolverParameter.getDefaultInstance();
      }

      public com.nova.utils.caffe.Caffe.SolverParameter build() {
        com.nova.utils.caffe.Caffe.SolverParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nova.utils.caffe.Caffe.SolverParameter buildPartial() {
        com.nova.utils.caffe.Caffe.SolverParameter result = new com.nova.utils.caffe.Caffe.SolverParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.trainNet_ = trainNet_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.testNet_ = testNet_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.testIter_ = testIter_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.testInterval_ = testInterval_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.baseLr_ = baseLr_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.display_ = display_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.maxIter_ = maxIter_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.lrPolicy_ = lrPolicy_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.gamma_ = gamma_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.power_ = power_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.momentum_ = momentum_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.weightDecay_ = weightDecay_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.stepsize_ = stepsize_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.snapshot_ = snapshot_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.snapshotPrefix_ = snapshotPrefix_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.snapshotDiff_ = snapshotDiff_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.solverMode_ = solverMode_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.deviceId_ = deviceId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nova.utils.caffe.Caffe.SolverParameter) {
          return mergeFrom((com.nova.utils.caffe.Caffe.SolverParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nova.utils.caffe.Caffe.SolverParameter other) {
        if (other == com.nova.utils.caffe.Caffe.SolverParameter.getDefaultInstance()) return this;
        if (other.hasTrainNet()) {
          bitField0_ |= 0x00000001;
          trainNet_ = other.trainNet_;
          onChanged();
        }
        if (other.hasTestNet()) {
          bitField0_ |= 0x00000002;
          testNet_ = other.testNet_;
          onChanged();
        }
        if (other.hasTestIter()) {
          setTestIter(other.getTestIter());
        }
        if (other.hasTestInterval()) {
          setTestInterval(other.getTestInterval());
        }
        if (other.hasBaseLr()) {
          setBaseLr(other.getBaseLr());
        }
        if (other.hasDisplay()) {
          setDisplay(other.getDisplay());
        }
        if (other.hasMaxIter()) {
          setMaxIter(other.getMaxIter());
        }
        if (other.hasLrPolicy()) {
          bitField0_ |= 0x00000080;
          lrPolicy_ = other.lrPolicy_;
          onChanged();
        }
        if (other.hasGamma()) {
          setGamma(other.getGamma());
        }
        if (other.hasPower()) {
          setPower(other.getPower());
        }
        if (other.hasMomentum()) {
          setMomentum(other.getMomentum());
        }
        if (other.hasWeightDecay()) {
          setWeightDecay(other.getWeightDecay());
        }
        if (other.hasStepsize()) {
          setStepsize(other.getStepsize());
        }
        if (other.hasSnapshot()) {
          setSnapshot(other.getSnapshot());
        }
        if (other.hasSnapshotPrefix()) {
          bitField0_ |= 0x00004000;
          snapshotPrefix_ = other.snapshotPrefix_;
          onChanged();
        }
        if (other.hasSnapshotDiff()) {
          setSnapshotDiff(other.getSnapshotDiff());
        }
        if (other.hasSolverMode()) {
          setSolverMode(other.getSolverMode());
        }
        if (other.hasDeviceId()) {
          setDeviceId(other.getDeviceId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nova.utils.caffe.Caffe.SolverParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nova.utils.caffe.Caffe.SolverParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string train_net = 1;
      private java.lang.Object trainNet_ = "";
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public boolean hasTrainNet() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public java.lang.String getTrainNet() {
        java.lang.Object ref = trainNet_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          trainNet_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTrainNetBytes() {
        java.lang.Object ref = trainNet_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          trainNet_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public Builder setTrainNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        trainNet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public Builder clearTrainNet() {
        bitField0_ = (bitField0_ & ~0x00000001);
        trainNet_ = getDefaultInstance().getTrainNet();
        onChanged();
        return this;
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public Builder setTrainNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        trainNet_ = value;
        onChanged();
        return this;
      }

      // optional string test_net = 2;
      private java.lang.Object testNet_ = "";
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public boolean hasTestNet() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public java.lang.String getTestNet() {
        java.lang.Object ref = testNet_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          testNet_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTestNetBytes() {
        java.lang.Object ref = testNet_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          testNet_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public Builder setTestNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        testNet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public Builder clearTestNet() {
        bitField0_ = (bitField0_ & ~0x00000002);
        testNet_ = getDefaultInstance().getTestNet();
        onChanged();
        return this;
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public Builder setTestNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        testNet_ = value;
        onChanged();
        return this;
      }

      // optional int32 test_iter = 3 [default = 0];
      private int testIter_ ;
      /**
       * <code>optional int32 test_iter = 3 [default = 0];</code>
       *
       * <pre>
       * The number of iterations for each testing phase.
       * </pre>
       */
      public boolean hasTestIter() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 test_iter = 3 [default = 0];</code>
       *
       * <pre>
       * The number of iterations for each testing phase.
       * </pre>
       */
      public int getTestIter() {
        return testIter_;
      }
      /**
       * <code>optional int32 test_iter = 3 [default = 0];</code>
       *
       * <pre>
       * The number of iterations for each testing phase.
       * </pre>
       */
      public Builder setTestIter(int value) {
        bitField0_ |= 0x00000004;
        testIter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 test_iter = 3 [default = 0];</code>
       *
       * <pre>
       * The number of iterations for each testing phase.
       * </pre>
       */
      public Builder clearTestIter() {
        bitField0_ = (bitField0_ & ~0x00000004);
        testIter_ = 0;
        onChanged();
        return this;
      }

      // optional int32 test_interval = 4 [default = 0];
      private int testInterval_ ;
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public boolean hasTestInterval() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public int getTestInterval() {
        return testInterval_;
      }
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public Builder setTestInterval(int value) {
        bitField0_ |= 0x00000008;
        testInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public Builder clearTestInterval() {
        bitField0_ = (bitField0_ & ~0x00000008);
        testInterval_ = 0;
        onChanged();
        return this;
      }

      // optional float base_lr = 5;
      private float baseLr_ ;
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public boolean hasBaseLr() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public float getBaseLr() {
        return baseLr_;
      }
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public Builder setBaseLr(float value) {
        bitField0_ |= 0x00000010;
        baseLr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public Builder clearBaseLr() {
        bitField0_ = (bitField0_ & ~0x00000010);
        baseLr_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 display = 6;
      private int display_ ;
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public boolean hasDisplay() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public int getDisplay() {
        return display_;
      }
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public Builder setDisplay(int value) {
        bitField0_ |= 0x00000020;
        display_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public Builder clearDisplay() {
        bitField0_ = (bitField0_ & ~0x00000020);
        display_ = 0;
        onChanged();
        return this;
      }

      // optional int32 max_iter = 7;
      private int maxIter_ ;
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public boolean hasMaxIter() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public int getMaxIter() {
        return maxIter_;
      }
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public Builder setMaxIter(int value) {
        bitField0_ |= 0x00000040;
        maxIter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public Builder clearMaxIter() {
        bitField0_ = (bitField0_ & ~0x00000040);
        maxIter_ = 0;
        onChanged();
        return this;
      }

      // optional string lr_policy = 8;
      private java.lang.Object lrPolicy_ = "";
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public boolean hasLrPolicy() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public java.lang.String getLrPolicy() {
        java.lang.Object ref = lrPolicy_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          lrPolicy_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLrPolicyBytes() {
        java.lang.Object ref = lrPolicy_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          lrPolicy_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public Builder setLrPolicy(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        lrPolicy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public Builder clearLrPolicy() {
        bitField0_ = (bitField0_ & ~0x00000080);
        lrPolicy_ = getDefaultInstance().getLrPolicy();
        onChanged();
        return this;
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public Builder setLrPolicyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        lrPolicy_ = value;
        onChanged();
        return this;
      }

      // optional float gamma = 9;
      private float gamma_ ;
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public boolean hasGamma() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public float getGamma() {
        return gamma_;
      }
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder setGamma(float value) {
        bitField0_ |= 0x00000100;
        gamma_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder clearGamma() {
        bitField0_ = (bitField0_ & ~0x00000100);
        gamma_ = 0F;
        onChanged();
        return this;
      }

      // optional float power = 10;
      private float power_ ;
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public boolean hasPower() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public float getPower() {
        return power_;
      }
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder setPower(float value) {
        bitField0_ |= 0x00000200;
        power_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder clearPower() {
        bitField0_ = (bitField0_ & ~0x00000200);
        power_ = 0F;
        onChanged();
        return this;
      }

      // optional float momentum = 11;
      private float momentum_ ;
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public boolean hasMomentum() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public float getMomentum() {
        return momentum_;
      }
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public Builder setMomentum(float value) {
        bitField0_ |= 0x00000400;
        momentum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public Builder clearMomentum() {
        bitField0_ = (bitField0_ & ~0x00000400);
        momentum_ = 0F;
        onChanged();
        return this;
      }

      // optional float weight_decay = 12;
      private float weightDecay_ ;
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public boolean hasWeightDecay() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public float getWeightDecay() {
        return weightDecay_;
      }
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public Builder setWeightDecay(float value) {
        bitField0_ |= 0x00000800;
        weightDecay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public Builder clearWeightDecay() {
        bitField0_ = (bitField0_ & ~0x00000800);
        weightDecay_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 stepsize = 13;
      private int stepsize_ ;
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public boolean hasStepsize() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public int getStepsize() {
        return stepsize_;
      }
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public Builder setStepsize(int value) {
        bitField0_ |= 0x00001000;
        stepsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public Builder clearStepsize() {
        bitField0_ = (bitField0_ & ~0x00001000);
        stepsize_ = 0;
        onChanged();
        return this;
      }

      // optional int32 snapshot = 14 [default = 0];
      private int snapshot_ ;
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public boolean hasSnapshot() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public int getSnapshot() {
        return snapshot_;
      }
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public Builder setSnapshot(int value) {
        bitField0_ |= 0x00002000;
        snapshot_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public Builder clearSnapshot() {
        bitField0_ = (bitField0_ & ~0x00002000);
        snapshot_ = 0;
        onChanged();
        return this;
      }

      // optional string snapshot_prefix = 15;
      private java.lang.Object snapshotPrefix_ = "";
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public boolean hasSnapshotPrefix() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public java.lang.String getSnapshotPrefix() {
        java.lang.Object ref = snapshotPrefix_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          snapshotPrefix_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSnapshotPrefixBytes() {
        java.lang.Object ref = snapshotPrefix_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          snapshotPrefix_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public Builder setSnapshotPrefix(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
        snapshotPrefix_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public Builder clearSnapshotPrefix() {
        bitField0_ = (bitField0_ & ~0x00004000);
        snapshotPrefix_ = getDefaultInstance().getSnapshotPrefix();
        onChanged();
        return this;
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public Builder setSnapshotPrefixBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
        snapshotPrefix_ = value;
        onChanged();
        return this;
      }

      // optional bool snapshot_diff = 16 [default = false];
      private boolean snapshotDiff_ ;
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public boolean hasSnapshotDiff() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public boolean getSnapshotDiff() {
        return snapshotDiff_;
      }
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public Builder setSnapshotDiff(boolean value) {
        bitField0_ |= 0x00008000;
        snapshotDiff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public Builder clearSnapshotDiff() {
        bitField0_ = (bitField0_ & ~0x00008000);
        snapshotDiff_ = false;
        onChanged();
        return this;
      }

      // optional int32 solver_mode = 17 [default = 1];
      private int solverMode_ = 1;
      /**
       * <code>optional int32 solver_mode = 17 [default = 1];</code>
       *
       * <pre>
       * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
       * </pre>
       */
      public boolean hasSolverMode() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 solver_mode = 17 [default = 1];</code>
       *
       * <pre>
       * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
       * </pre>
       */
      public int getSolverMode() {
        return solverMode_;
      }
      /**
       * <code>optional int32 solver_mode = 17 [default = 1];</code>
       *
       * <pre>
       * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
       * </pre>
       */
      public Builder setSolverMode(int value) {
        bitField0_ |= 0x00010000;
        solverMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 solver_mode = 17 [default = 1];</code>
       *
       * <pre>
       * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
       * </pre>
       */
      public Builder clearSolverMode() {
        bitField0_ = (bitField0_ & ~0x00010000);
        solverMode_ = 1;
        onChanged();
        return this;
      }

      // optional int32 device_id = 18 [default = 0];
      private int deviceId_ ;
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id=0 in default.
       * </pre>
       */
      public boolean hasDeviceId() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id=0 in default.
       * </pre>
       */
      public int getDeviceId() {
        return deviceId_;
      }
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id=0 in default.
       * </pre>
       */
      public Builder setDeviceId(int value) {
        bitField0_ |= 0x00020000;
        deviceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id=0 in default.
       * </pre>
       */
      public Builder clearDeviceId() {
        bitField0_ = (bitField0_ & ~0x00020000);
        deviceId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.nova.utils.caffe.SolverParameter)
    }

    static {
      defaultInstance = new SolverParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.nova.utils.caffe.SolverParameter)
  }

  public interface SolverStateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 iter = 1;
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    boolean hasIter();
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    int getIter();

    // optional string learned_net = 2;
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    boolean hasLearnedNet();
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    java.lang.String getLearnedNet();
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLearnedNetBytes();

    // repeated .com.nova.utils.caffe.BlobProto history = 3;
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    java.util.List<com.nova.utils.caffe.Caffe.BlobProto> 
        getHistoryList();
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    com.nova.utils.caffe.Caffe.BlobProto getHistory(int index);
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    int getHistoryCount();
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    java.util.List<? extends com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
        getHistoryOrBuilderList();
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    com.nova.utils.caffe.Caffe.BlobProtoOrBuilder getHistoryOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.nova.utils.caffe.SolverState}
   *
   * <pre>
   * A message that stores the solver snapshots
   * </pre>
   */
  public static final class SolverState extends
      com.google.protobuf.GeneratedMessage
      implements SolverStateOrBuilder {
    // Use SolverState.newBuilder() to construct.
    private SolverState(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SolverState(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SolverState defaultInstance;
    public static SolverState getDefaultInstance() {
      return defaultInstance;
    }

    public SolverState getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SolverState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              iter_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              learnedNet_ = input.readBytes();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                history_ = new java.util.ArrayList<com.nova.utils.caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00000004;
              }
              history_.add(input.readMessage(com.nova.utils.caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          history_ = java.util.Collections.unmodifiableList(history_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nova.utils.caffe.Caffe.SolverState.class, com.nova.utils.caffe.Caffe.SolverState.Builder.class);
    }

    public static com.google.protobuf.Parser<SolverState> PARSER =
        new com.google.protobuf.AbstractParser<SolverState>() {
      public SolverState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SolverState(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SolverState> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 iter = 1;
    public static final int ITER_FIELD_NUMBER = 1;
    private int iter_;
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    public boolean hasIter() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    public int getIter() {
      return iter_;
    }

    // optional string learned_net = 2;
    public static final int LEARNED_NET_FIELD_NUMBER = 2;
    private java.lang.Object learnedNet_;
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    public boolean hasLearnedNet() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    public java.lang.String getLearnedNet() {
      java.lang.Object ref = learnedNet_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          learnedNet_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLearnedNetBytes() {
      java.lang.Object ref = learnedNet_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        learnedNet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated .com.nova.utils.caffe.BlobProto history = 3;
    public static final int HISTORY_FIELD_NUMBER = 3;
    private java.util.List<com.nova.utils.caffe.Caffe.BlobProto> history_;
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public java.util.List<com.nova.utils.caffe.Caffe.BlobProto> getHistoryList() {
      return history_;
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public java.util.List<? extends com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
        getHistoryOrBuilderList() {
      return history_;
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public int getHistoryCount() {
      return history_.size();
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.BlobProto getHistory(int index) {
      return history_.get(index);
    }
    /**
     * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public com.nova.utils.caffe.Caffe.BlobProtoOrBuilder getHistoryOrBuilder(
        int index) {
      return history_.get(index);
    }

    private void initFields() {
      iter_ = 0;
      learnedNet_ = "";
      history_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, iter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getLearnedNetBytes());
      }
      for (int i = 0; i < history_.size(); i++) {
        output.writeMessage(3, history_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, iter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getLearnedNetBytes());
      }
      for (int i = 0; i < history_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, history_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.nova.utils.caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.SolverState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nova.utils.caffe.Caffe.SolverState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.SolverState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.SolverState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.SolverState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.SolverState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.nova.utils.caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.nova.utils.caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.nova.utils.caffe.Caffe.SolverState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.nova.utils.caffe.SolverState}
     *
     * <pre>
     * A message that stores the solver snapshots
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.nova.utils.caffe.Caffe.SolverStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nova.utils.caffe.Caffe.SolverState.class, com.nova.utils.caffe.Caffe.SolverState.Builder.class);
      }

      // Construct using com.nova.utils.caffe.Caffe.SolverState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHistoryFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        iter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        learnedNet_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          historyBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nova.utils.caffe.Caffe.internal_static_com_nova_utils_caffe_SolverState_descriptor;
      }

      public com.nova.utils.caffe.Caffe.SolverState getDefaultInstanceForType() {
        return com.nova.utils.caffe.Caffe.SolverState.getDefaultInstance();
      }

      public com.nova.utils.caffe.Caffe.SolverState build() {
        com.nova.utils.caffe.Caffe.SolverState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nova.utils.caffe.Caffe.SolverState buildPartial() {
        com.nova.utils.caffe.Caffe.SolverState result = new com.nova.utils.caffe.Caffe.SolverState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.iter_ = iter_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.learnedNet_ = learnedNet_;
        if (historyBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            history_ = java.util.Collections.unmodifiableList(history_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.history_ = history_;
        } else {
          result.history_ = historyBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nova.utils.caffe.Caffe.SolverState) {
          return mergeFrom((com.nova.utils.caffe.Caffe.SolverState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nova.utils.caffe.Caffe.SolverState other) {
        if (other == com.nova.utils.caffe.Caffe.SolverState.getDefaultInstance()) return this;
        if (other.hasIter()) {
          setIter(other.getIter());
        }
        if (other.hasLearnedNet()) {
          bitField0_ |= 0x00000002;
          learnedNet_ = other.learnedNet_;
          onChanged();
        }
        if (historyBuilder_ == null) {
          if (!other.history_.isEmpty()) {
            if (history_.isEmpty()) {
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureHistoryIsMutable();
              history_.addAll(other.history_);
            }
            onChanged();
          }
        } else {
          if (!other.history_.isEmpty()) {
            if (historyBuilder_.isEmpty()) {
              historyBuilder_.dispose();
              historyBuilder_ = null;
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000004);
              historyBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHistoryFieldBuilder() : null;
            } else {
              historyBuilder_.addAllMessages(other.history_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nova.utils.caffe.Caffe.SolverState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nova.utils.caffe.Caffe.SolverState) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 iter = 1;
      private int iter_ ;
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public boolean hasIter() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public int getIter() {
        return iter_;
      }
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public Builder setIter(int value) {
        bitField0_ |= 0x00000001;
        iter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public Builder clearIter() {
        bitField0_ = (bitField0_ & ~0x00000001);
        iter_ = 0;
        onChanged();
        return this;
      }

      // optional string learned_net = 2;
      private java.lang.Object learnedNet_ = "";
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public boolean hasLearnedNet() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public java.lang.String getLearnedNet() {
        java.lang.Object ref = learnedNet_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          learnedNet_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLearnedNetBytes() {
        java.lang.Object ref = learnedNet_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          learnedNet_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public Builder setLearnedNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        learnedNet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public Builder clearLearnedNet() {
        bitField0_ = (bitField0_ & ~0x00000002);
        learnedNet_ = getDefaultInstance().getLearnedNet();
        onChanged();
        return this;
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public Builder setLearnedNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        learnedNet_ = value;
        onChanged();
        return this;
      }

      // repeated .com.nova.utils.caffe.BlobProto history = 3;
      private java.util.List<com.nova.utils.caffe.Caffe.BlobProto> history_ =
        java.util.Collections.emptyList();
      private void ensureHistoryIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          history_ = new java.util.ArrayList<com.nova.utils.caffe.Caffe.BlobProto>(history_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.nova.utils.caffe.Caffe.BlobProto, com.nova.utils.caffe.Caffe.BlobProto.Builder, com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> historyBuilder_;

      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public java.util.List<com.nova.utils.caffe.Caffe.BlobProto> getHistoryList() {
        if (historyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(history_);
        } else {
          return historyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public int getHistoryCount() {
        if (historyBuilder_ == null) {
          return history_.size();
        } else {
          return historyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProto getHistory(int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);
        } else {
          return historyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder setHistory(
          int index, com.nova.utils.caffe.Caffe.BlobProto value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.set(index, value);
          onChanged();
        } else {
          historyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder setHistory(
          int index, com.nova.utils.caffe.Caffe.BlobProto.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.set(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(com.nova.utils.caffe.Caffe.BlobProto value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(value);
          onChanged();
        } else {
          historyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(
          int index, com.nova.utils.caffe.Caffe.BlobProto value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(index, value);
          onChanged();
        } else {
          historyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(
          com.nova.utils.caffe.Caffe.BlobProto.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(
          int index, com.nova.utils.caffe.Caffe.BlobProto.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addAllHistory(
          java.lang.Iterable<? extends com.nova.utils.caffe.Caffe.BlobProto> values) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          super.addAll(values, history_);
          onChanged();
        } else {
          historyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder clearHistory() {
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          historyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder removeHistory(int index) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.remove(index);
          onChanged();
        } else {
          historyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProto.Builder getHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProtoOrBuilder getHistoryOrBuilder(
          int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);  } else {
          return historyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public java.util.List<? extends com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
           getHistoryOrBuilderList() {
        if (historyBuilder_ != null) {
          return historyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(history_);
        }
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProto.Builder addHistoryBuilder() {
        return getHistoryFieldBuilder().addBuilder(
            com.nova.utils.caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public com.nova.utils.caffe.Caffe.BlobProto.Builder addHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().addBuilder(
            index, com.nova.utils.caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .com.nova.utils.caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public java.util.List<com.nova.utils.caffe.Caffe.BlobProto.Builder> 
           getHistoryBuilderList() {
        return getHistoryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.nova.utils.caffe.Caffe.BlobProto, com.nova.utils.caffe.Caffe.BlobProto.Builder, com.nova.utils.caffe.Caffe.BlobProtoOrBuilder> 
          getHistoryFieldBuilder() {
        if (historyBuilder_ == null) {
          historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.nova.utils.caffe.Caffe.BlobProto, com.nova.utils.caffe.Caffe.BlobProto.Builder, com.nova.utils.caffe.Caffe.BlobProtoOrBuilder>(
                  history_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          history_ = null;
        }
        return historyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.nova.utils.caffe.SolverState)
    }

    static {
      defaultInstance = new SolverState(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.nova.utils.caffe.SolverState)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_nova_utils_caffe_BlobProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_nova_utils_caffe_BlobProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_nova_utils_caffe_BlobProtoVector_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_nova_utils_caffe_BlobProtoVector_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_nova_utils_caffe_Datum_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_nova_utils_caffe_Datum_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_nova_utils_caffe_FillerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_nova_utils_caffe_FillerParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_nova_utils_caffe_LayerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_nova_utils_caffe_LayerParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_nova_utils_caffe_LayerConnection_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_nova_utils_caffe_LayerConnection_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_nova_utils_caffe_NetParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_nova_utils_caffe_NetParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_nova_utils_caffe_SolverParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_nova_utils_caffe_SolverParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_nova_utils_caffe_SolverState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_nova_utils_caffe_SolverState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013caffe.proto\022\024com.nova.utils.caffe\"y\n\tB" +
      "lobProto\022\016\n\003num\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001" +
      "(\005:\0010\022\021\n\006height\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:" +
      "\0010\022\020\n\004data\030\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\"A" +
      "\n\017BlobProtoVector\022.\n\005blobs\030\001 \003(\0132\037.com.n" +
      "ova.utils.caffe.BlobProto\"i\n\005Datum\022\020\n\010ch" +
      "annels\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\r\n\005width\030\003 " +
      "\001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005label\030\005 \001(\005\022\022\n\nfloa" +
      "t_data\030\006 \003(\002\"|\n\017FillerParameter\022\026\n\004type\030" +
      "\001 \001(\t:\010constant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n\003min",
      "\030\003 \001(\002:\0010\022\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 \001(\002:" +
      "\0010\022\016\n\003std\030\006 \001(\002:\0011\"\311\005\n\016LayerParameter\022\014\n" +
      "\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\022\n\nnum_output\030" +
      "\003 \001(\r\022\026\n\010biasterm\030\004 \001(\010:\004true\022<\n\rweight_" +
      "filler\030\005 \001(\0132%.com.nova.utils.caffe.Fill" +
      "erParameter\022:\n\013bias_filler\030\006 \001(\0132%.com.n" +
      "ova.utils.caffe.FillerParameter\022\016\n\003pad\030\007" +
      " \001(\r:\0010\022\022\n\nkernelsize\030\010 \001(\r\022\020\n\005group\030\t \001" +
      "(\r:\0011\022\021\n\006stride\030\n \001(\r:\0011\022B\n\004pool\030\013 \001(\0162/" +
      ".com.nova.utils.caffe.LayerParameter.Poo",
      "lMethod:\003MAX\022\032\n\rdropout_ratio\030\014 \001(\002:\0030.5" +
      "\022\025\n\nlocal_size\030\r \001(\r:\0015\022\020\n\005alpha\030\016 \001(\002:\001" +
      "1\022\022\n\004beta\030\017 \001(\002:\0040.75\022\016\n\006source\030\020 \001(\t\022\020\n" +
      "\005scale\030\021 \001(\002:\0011\022\020\n\010meanfile\030\022 \001(\t\022\021\n\tbat" +
      "chsize\030\023 \001(\r\022\023\n\010cropsize\030\024 \001(\r:\0010\022\025\n\006mir" +
      "ror\030\025 \001(\010:\005false\022.\n\005blobs\0302 \003(\0132\037.com.no" +
      "va.utils.caffe.BlobProto\022\020\n\010blobs_lr\0303 \003" +
      "(\002\022\024\n\014weight_decay\0304 \003(\002\022\024\n\trand_skip\0305 " +
      "\001(\r:\0010\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016" +
      "\n\nSTOCHASTIC\020\002\"c\n\017LayerConnection\0223\n\005lay",
      "er\030\001 \001(\0132$.com.nova.utils.caffe.LayerPar" +
      "ameter\022\016\n\006bottom\030\002 \003(\t\022\013\n\003top\030\003 \003(\t\"\224\001\n\014" +
      "NetParameter\022\014\n\004name\030\001 \001(\t\0225\n\006layers\030\002 \003" +
      "(\0132%.com.nova.utils.caffe.LayerConnectio" +
      "n\022\r\n\005input\030\003 \003(\t\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016f" +
      "orce_backward\030\005 \001(\010:\005false\"\377\002\n\017SolverPar" +
      "ameter\022\021\n\ttrain_net\030\001 \001(\t\022\020\n\010test_net\030\002 " +
      "\001(\t\022\024\n\ttest_iter\030\003 \001(\005:\0010\022\030\n\rtest_interv" +
      "al\030\004 \001(\005:\0010\022\017\n\007base_lr\030\005 \001(\002\022\017\n\007display\030" +
      "\006 \001(\005\022\020\n\010max_iter\030\007 \001(\005\022\021\n\tlr_policy\030\010 \001",
      "(\t\022\r\n\005gamma\030\t \001(\002\022\r\n\005power\030\n \001(\002\022\020\n\010mome" +
      "ntum\030\013 \001(\002\022\024\n\014weight_decay\030\014 \001(\002\022\020\n\010step" +
      "size\030\r \001(\005\022\023\n\010snapshot\030\016 \001(\005:\0010\022\027\n\017snaps" +
      "hot_prefix\030\017 \001(\t\022\034\n\rsnapshot_diff\030\020 \001(\010:" +
      "\005false\022\026\n\013solver_mode\030\021 \001(\005:\0011\022\024\n\tdevice" +
      "_id\030\022 \001(\005:\0010\"b\n\013SolverState\022\014\n\004iter\030\001 \001(" +
      "\005\022\023\n\013learned_net\030\002 \001(\t\0220\n\007history\030\003 \003(\0132" +
      "\037.com.nova.utils.caffe.BlobProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_nova_utils_caffe_BlobProto_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_nova_utils_caffe_BlobProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_nova_utils_caffe_BlobProto_descriptor,
              new java.lang.String[] { "Num", "Channels", "Height", "Width", "Data", "Diff", });
          internal_static_com_nova_utils_caffe_BlobProtoVector_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_nova_utils_caffe_BlobProtoVector_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_nova_utils_caffe_BlobProtoVector_descriptor,
              new java.lang.String[] { "Blobs", });
          internal_static_com_nova_utils_caffe_Datum_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_nova_utils_caffe_Datum_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_nova_utils_caffe_Datum_descriptor,
              new java.lang.String[] { "Channels", "Height", "Width", "Data", "Label", "FloatData", });
          internal_static_com_nova_utils_caffe_FillerParameter_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_nova_utils_caffe_FillerParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_nova_utils_caffe_FillerParameter_descriptor,
              new java.lang.String[] { "Type", "Value", "Min", "Max", "Mean", "Std", });
          internal_static_com_nova_utils_caffe_LayerParameter_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_nova_utils_caffe_LayerParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_nova_utils_caffe_LayerParameter_descriptor,
              new java.lang.String[] { "Name", "Type", "NumOutput", "Biasterm", "WeightFiller", "BiasFiller", "Pad", "Kernelsize", "Group", "Stride", "Pool", "DropoutRatio", "LocalSize", "Alpha", "Beta", "Source", "Scale", "Meanfile", "Batchsize", "Cropsize", "Mirror", "Blobs", "BlobsLr", "WeightDecay", "RandSkip", });
          internal_static_com_nova_utils_caffe_LayerConnection_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_com_nova_utils_caffe_LayerConnection_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_nova_utils_caffe_LayerConnection_descriptor,
              new java.lang.String[] { "Layer", "Bottom", "Top", });
          internal_static_com_nova_utils_caffe_NetParameter_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_com_nova_utils_caffe_NetParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_nova_utils_caffe_NetParameter_descriptor,
              new java.lang.String[] { "Name", "Layers", "Input", "InputDim", "ForceBackward", });
          internal_static_com_nova_utils_caffe_SolverParameter_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_com_nova_utils_caffe_SolverParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_nova_utils_caffe_SolverParameter_descriptor,
              new java.lang.String[] { "TrainNet", "TestNet", "TestIter", "TestInterval", "BaseLr", "Display", "MaxIter", "LrPolicy", "Gamma", "Power", "Momentum", "WeightDecay", "Stepsize", "Snapshot", "SnapshotPrefix", "SnapshotDiff", "SolverMode", "DeviceId", });
          internal_static_com_nova_utils_caffe_SolverState_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_com_nova_utils_caffe_SolverState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_nova_utils_caffe_SolverState_descriptor,
              new java.lang.String[] { "Iter", "LearnedNet", "History", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
